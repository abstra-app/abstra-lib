{
  "abstra.agents": {
    "get_connections": {
      "object_type": "function",
      "description": "Get a list of available connections based on the specified role.",
      "params": [
        {
          "name": "role",
          "type": "Literal[\"client\", \"agent\"]",
          "description": "The role to get connections for, either \"client\" or \"agent\". List[ConnectionModel]: A list of connection models for the specified role.",
          "default": "None",
          "required": true
        }
      ],
      "return_type": "List[abstra_internals.entities.agents.ConnectionModel]",
      "examples": []
    }
  },
  "abstra.ai": {
    "prompt": {
      "object_type": "function",
      "description": "Send a prompt to the AI and get a response.",
      "params": [
        {
          "name": "prompt",
          "type": "Union[Prompt, List[Prompt]]",
          "description": "The prompt(s) to send to the AI model.",
          "default": "None",
          "required": true
        },
        {
          "name": "instructions",
          "type": "Union[str, List[str]]",
          "description": "Additional instructions for the AI. Defaults to [].",
          "default": "[]",
          "required": false
        },
        {
          "name": "format",
          "type": "Optional[Format]",
          "description": "The expected format for the AI response. Defaults to None.",
          "default": "None",
          "required": false
        },
        {
          "name": "temperature",
          "type": "float",
          "description": "Controls randomness in the AI response, from 0.0 to 2.0. Defaults to 1.0. The AI response formatted according to the specified format if provided. ValueError: If temperature is not between 0.0 and 2.0.",
          "default": "1.0",
          "required": false
        }
      ],
      "return_type": "Unknown",
      "examples": []
    },
    "parse_document": {
      "object_type": "function",
      "description": "Parse a document using the specified AI model.",
      "params": [
        {
          "name": "document_path",
          "type": "Path",
          "description": "The path to the document to be parsed.",
          "default": "None",
          "required": true
        },
        {
          "name": "model",
          "type": "str",
          "description": "The AI model to use for parsing. dict: The parsed document data. ValueError: If the document path is invalid or the model is not supported.",
          "default": "None",
          "required": true
        }
      ],
      "return_type": "dict",
      "examples": []
    },
    "parse_nfse": {
      "object_type": "function",
      "description": "Parse a Nota Fiscal de Serviço Eletrônica (NFSe) document.",
      "params": [
        {
          "name": "document_path",
          "type": "Path",
          "description": "The path to the NFSe document to be parsed. CloudApiCliModelsNfseResponse: The parsed NFSe response. ValueError: If the document path is invalid or the parsing fails.",
          "default": "None",
          "required": true
        }
      ],
      "return_type": "abstra_internals.contracts_generated.CloudApiCliModelsNfseResponse",
      "examples": []
    }
  },
  "abstra.cli": {
    "CLI": null
  },
  "abstra.common": {
    "get_persistent_dir": {
      "object_type": "function",
      "description": "Get the path to the persistent directory Returns: pathlib.Path: Path to the persistent directory",
      "params": [],
      "return_type": "pathlib.Path",
      "examples": []
    },
    "get_project_url": {
      "object_type": "function",
      "description": "Get the project URL. localhost if running locally Returns: str: Project URL",
      "params": [],
      "return_type": "str",
      "examples": []
    },
    "get_public_dir": {
      "object_type": "function",
      "description": "Get the path to the public directory Returns: pathlib.Path: Path to the public directory",
      "params": [],
      "return_type": "pathlib.Path",
      "examples": []
    },
    "create_public_link": {
      "object_type": "function",
      "description": "Create a public link for a file by copying it to the public directory",
      "params": [
        {
          "name": "path",
          "type": "Union[str, pathlib.Path]",
          "description": "Path to the file str: Public link to the file",
          "default": "None",
          "required": true
        }
      ],
      "return_type": "str",
      "examples": []
    },
    "get_execution_id": {
      "object_type": "function",
      "description": "Get the execution ID of the current execution.",
      "params": [],
      "return_type": "str",
      "examples": []
    }
  },
  "abstra.compat": {
    "use_legacy_threads": {
      "object_type": "function",
      "description": "Sets up compatibility mode for legacy threading functionality.",
      "params": [
        {
          "name": "mode",
          "type": "Literal[\"scripts\", \"forms\", \"jobs\", \"hooks\"]",
          "description": "The execution mode for the legacy threads.",
          "default": "None",
          "required": true
        }
      ],
      "return_type": "Unknown",
      "examples": []
    }
  },
  "abstra.connectors": {
    "get_access_token": {
      "object_type": "function",
      "description": "Retrieve an access token by its name.",
      "params": [
        {
          "name": "name",
          "type": "str",
          "description": "The name of the access token to retrieve. AccessTokenDTO: The access token data transfer object.",
          "default": "None",
          "required": true
        }
      ],
      "return_type": "abstra_internals.repositories.connectors.AccessTokenDTO",
      "examples": []
    },
    "get_gsheets_credentials": {
      "object_type": "function",
      "description": "Get Google Sheets credentials.",
      "params": [
        {
          "name": "connection_name",
          "type": "str",
          "description": "The name of the Google Sheets connection. Defaults to \"google-sheets\". AbstraGoogleCredentials: Credentials object for Google Sheets authentication.",
          "default": "'google-sheets'",
          "required": false
        }
      ],
      "return_type": "Unknown",
      "examples": []
    },
    "get_gdrive_credentials": {
      "object_type": "function",
      "description": "Get Google Drive credentials.",
      "params": [
        {
          "name": "connection_name",
          "type": "str",
          "description": "The name of the Google Drive connection. Defaults to \"google-drive\". AbstraGoogleCredentials: Credentials object for Google Drive authentication.",
          "default": "'google-drive'",
          "required": false
        }
      ],
      "return_type": "Unknown",
      "examples": []
    },
    "get_gmail_credentials": {
      "object_type": "function",
      "description": "Get Gmail credentials.",
      "params": [
        {
          "name": "connection_name",
          "type": "str",
          "description": "The name of the Gmail connection. Defaults to \"gmail\". AbstraGoogleCredentials: Credentials object for Gmail authentication.",
          "default": "'gmail'",
          "required": false
        }
      ],
      "return_type": "Unknown",
      "examples": []
    },
    "get_bigquery_credentials": {
      "object_type": "function",
      "description": "Get Google BigQuery credentials.",
      "params": [
        {
          "name": "connection_name",
          "type": "str",
          "description": "The name of the BigQuery connection. Defaults to \"google-bigquery\". AbstraGoogleCredentials: Credentials object for Google BigQuery authentication.",
          "default": "'google-bigquery'",
          "required": false
        }
      ],
      "return_type": "Unknown",
      "examples": []
    },
    "get_google_cal_credentials": {
      "object_type": "function",
      "description": "Get Google Calendar credentials.",
      "params": [
        {
          "name": "connection_name",
          "type": "str",
          "description": "The name of the Google Calendar connection. Defaults to \"google-calendar\". AbstraGoogleCredentials: Credentials object for Google Calendar authentication.",
          "default": "'google-calendar'",
          "required": false
        }
      ],
      "return_type": "Unknown",
      "examples": []
    }
  },
  "abstra.ensurepath": {},
  "abstra.files": {
    "create_public_link": {
      "object_type": "function",
      "description": "Create a public link for a file by copying it to the public directory",
      "params": [
        {
          "name": "path",
          "type": "Union[str, pathlib.Path]",
          "description": "Path to the file str: Public link to the file",
          "default": "None",
          "required": true
        }
      ],
      "return_type": "str",
      "examples": []
    },
    "get_persistent_dir": {
      "object_type": "function",
      "description": "Get the path to the persistent directory Returns: pathlib.Path: Path to the persistent directory",
      "params": [],
      "return_type": "pathlib.Path",
      "examples": []
    },
    "get_public_dir": {
      "object_type": "function",
      "description": "Get the path to the public directory Returns: pathlib.Path: Path to the public directory",
      "params": [],
      "return_type": "pathlib.Path",
      "examples": []
    }
  },
  "abstra.forms": {
    "execute_js": {
      "object_type": "function",
      "description": "Execute JavaScript code in the browser",
      "params": [
        {
          "name": "code",
          "type": "str",
          "description": "JavaScript code to execute",
          "default": "None",
          "required": true
        },
        {
          "name": "context",
          "type": "dict",
          "description": "Context to pass to the JavaScript code. Defaults to {}. Any: Result of the JavaScript code",
          "default": "None",
          "required": false
        }
      ],
      "return_type": "Unknown",
      "examples": []
    },
    "get_query_params": {
      "object_type": "function",
      "description": "Get the query parameters from the current URL Returns: Dict[str, str]: Query parameters",
      "params": [],
      "return_type": "Dict[str, str]",
      "examples": []
    },
    "get_user": {
      "object_type": "function",
      "description": "Get the current user",
      "params": [
        {
          "name": "refresh",
          "type": "bool",
          "description": "Whether to force refresh the user. Defaults to False. Union[UserClaims, None]: User information",
          "default": "False",
          "required": false
        }
      ],
      "return_type": "abstra_internals.jwt_auth.UserClaims",
      "examples": []
    },
    "redirect": {
      "object_type": "function",
      "description": "Redirect the user to a new URL",
      "params": [
        {
          "name": "url",
          "type": "str",
          "description": "URL to redirect to",
          "default": "None",
          "required": true
        },
        {
          "name": "query_params",
          "type": "Optional[dict]",
          "description": "Query parameters to append to the URL. Defaults to None. None",
          "default": "None",
          "required": false
        }
      ],
      "return_type": "None",
      "examples": []
    },
    "url_params": null,
    "reuse": {
      "object_type": "function",
      "description": "Reuse the result of a function call with the given arguments.",
      "params": [
        {
          "name": "func",
          "type": "Callable",
          "description": "The function to reuse.",
          "default": "None",
          "required": true
        },
        {
          "name": "args",
          "type": "Any",
          "description": "Variable length argument list to pass to the function.",
          "default": "None",
          "required": false
        },
        {
          "name": "kwargs",
          "type": "Any",
          "description": "Arbitrary keyword arguments to pass to the function. Any: The result of the function call.",
          "default": "None",
          "required": false
        }
      ],
      "return_type": "Any",
      "examples": []
    },
    "Button": {
      "object_type": "class",
      "description": "Base class for form navigation buttons.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "The text displayed on the button.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "An optional key for the button. If not provided, the label will be used as the key.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "label": {
          "name": "label",
          "type": "str",
          "description": "The text displayed on the button."
        },
        "key": {
          "name": "key",
          "type": "Optional[str]",
          "description": "An optional key for the button. If not provided, the label will be used as the key."
        }
      },
      "parent_classes": [],
      "examples": []
    },
    "NextButton": {
      "object_type": "class",
      "description": "Button used to navigate to the next step in a form. Automatically labeled with internationalized \"Next\" text.",
      "init": {
        "params": []
      },
      "properties": {},
      "parent_classes": [
        "Button"
      ],
      "examples": []
    },
    "BackButton": {
      "object_type": "class",
      "description": "Button used to navigate to the previous step in a form. Automatically labeled with internationalized \"Back\" text.",
      "init": {
        "params": []
      },
      "properties": {},
      "parent_classes": [
        "Button"
      ],
      "examples": []
    },
    "Widget": {
      "object_type": "class",
      "description": "Helper class that provides a standard way to create an ABC using inheritance.",
      "init": {
        "params": []
      },
      "properties": {},
      "parent_classes": [],
      "examples": []
    },
    "ListItemSchema": {
      "object_type": "class",
      "description": "A schema for a list item This schema is used to define the schema of a list item.",
      "init": {
        "params": []
      },
      "properties": {},
      "parent_classes": [
        "WidgetSchema"
      ],
      "examples": []
    },
    "AppointmentInput": {
      "object_type": "class",
      "description": "Appointment scheduling input widget for selecting time slots.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the input.",
            "default": "None",
            "required": true
          },
          {
            "name": "slots",
            "type": "List[Dict]",
            "description": "List of available time slots. Eg. [{\"begin\": \"2023-10-01T10:00:00\", \"end\": \"2023-10-01T11:00:00\"}]",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether a time slot must be selected before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the input should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "Optional[AppointmentSlot]",
          "description": "The selected appointment time slot. AppointmentSlot contains begin and end attributes. Eg.: `{\"begin\": \"2023-10-01T10:00:00\", \"end\": \"2023-10-01T11:00:00\"}`"
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from datetime import datetime, timedelta\n\nfrom abstra.forms import AppointmentInput, run\n\n\ndef generate_slots():\n    \"\"\"\n    Generate a list of time slots for the next 14 days, excluding weekends and lunch breaks.\n    Each slot is 45 minutes long, starting from 10:00 to 18:00 with a 15-minute interval.\n    \"\"\"\n    slots = []\n    # Replace with datetime.now() for real-time usage\n    current_date = datetime(2025, 1, 1)\n    max_date = current_date + timedelta(days=14)\n    while current_date < max_date:\n        if current_date.weekday() < 5:\n            for hour in range(10, 18):\n                if hour == 12:\n                    continue\n                begin = current_date.replace(hour=hour, minute=0)\n                end = begin + timedelta(minutes=45)\n                slots.append((begin, end))\n        current_date += timedelta(days=1)\n\n    return [{\"begin\": begin, \"end\": end} for begin, end in slots]\n\n\n# Create a page with the widget\nexample_page = [\n    AppointmentInput(\n        \"Welcome to Abstra, please select a demo slot\", slots=generate_slots()\n    ),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "appointment-input",
                "key": "Welcome to Abstra, please select a demo slot",
                "label": "Welcome to Abstra, please select a demo slot",
                "hint": null,
                "value": null,
                "required": true,
                "fullWidth": false,
                "disabled": false,
                "slots": [
                  {
                    "begin": "2025-01-01T10:00:00",
                    "end": "2025-01-01T10:45:00"
                  },
                  {
                    "begin": "2025-01-01T11:00:00",
                    "end": "2025-01-01T11:45:00"
                  },
                  {
                    "begin": "2025-01-01T13:00:00",
                    "end": "2025-01-01T13:45:00"
                  },
                  {
                    "begin": "2025-01-01T14:00:00",
                    "end": "2025-01-01T14:45:00"
                  },
                  {
                    "begin": "2025-01-01T15:00:00",
                    "end": "2025-01-01T15:45:00"
                  },
                  {
                    "begin": "2025-01-01T16:00:00",
                    "end": "2025-01-01T16:45:00"
                  },
                  {
                    "begin": "2025-01-01T17:00:00",
                    "end": "2025-01-01T17:45:00"
                  },
                  {
                    "begin": "2025-01-02T10:00:00",
                    "end": "2025-01-02T10:45:00"
                  },
                  {
                    "begin": "2025-01-02T11:00:00",
                    "end": "2025-01-02T11:45:00"
                  },
                  {
                    "begin": "2025-01-02T13:00:00",
                    "end": "2025-01-02T13:45:00"
                  },
                  {
                    "begin": "2025-01-02T14:00:00",
                    "end": "2025-01-02T14:45:00"
                  },
                  {
                    "begin": "2025-01-02T15:00:00",
                    "end": "2025-01-02T15:45:00"
                  },
                  {
                    "begin": "2025-01-02T16:00:00",
                    "end": "2025-01-02T16:45:00"
                  },
                  {
                    "begin": "2025-01-02T17:00:00",
                    "end": "2025-01-02T17:45:00"
                  },
                  {
                    "begin": "2025-01-03T10:00:00",
                    "end": "2025-01-03T10:45:00"
                  },
                  {
                    "begin": "2025-01-03T11:00:00",
                    "end": "2025-01-03T11:45:00"
                  },
                  {
                    "begin": "2025-01-03T13:00:00",
                    "end": "2025-01-03T13:45:00"
                  },
                  {
                    "begin": "2025-01-03T14:00:00",
                    "end": "2025-01-03T14:45:00"
                  },
                  {
                    "begin": "2025-01-03T15:00:00",
                    "end": "2025-01-03T15:45:00"
                  },
                  {
                    "begin": "2025-01-03T16:00:00",
                    "end": "2025-01-03T16:45:00"
                  },
                  {
                    "begin": "2025-01-03T17:00:00",
                    "end": "2025-01-03T17:45:00"
                  },
                  {
                    "begin": "2025-01-06T10:00:00",
                    "end": "2025-01-06T10:45:00"
                  },
                  {
                    "begin": "2025-01-06T11:00:00",
                    "end": "2025-01-06T11:45:00"
                  },
                  {
                    "begin": "2025-01-06T13:00:00",
                    "end": "2025-01-06T13:45:00"
                  },
                  {
                    "begin": "2025-01-06T14:00:00",
                    "end": "2025-01-06T14:45:00"
                  },
                  {
                    "begin": "2025-01-06T15:00:00",
                    "end": "2025-01-06T15:45:00"
                  },
                  {
                    "begin": "2025-01-06T16:00:00",
                    "end": "2025-01-06T16:45:00"
                  },
                  {
                    "begin": "2025-01-06T17:00:00",
                    "end": "2025-01-06T17:45:00"
                  },
                  {
                    "begin": "2025-01-07T10:00:00",
                    "end": "2025-01-07T10:45:00"
                  },
                  {
                    "begin": "2025-01-07T11:00:00",
                    "end": "2025-01-07T11:45:00"
                  },
                  {
                    "begin": "2025-01-07T13:00:00",
                    "end": "2025-01-07T13:45:00"
                  },
                  {
                    "begin": "2025-01-07T14:00:00",
                    "end": "2025-01-07T14:45:00"
                  },
                  {
                    "begin": "2025-01-07T15:00:00",
                    "end": "2025-01-07T15:45:00"
                  },
                  {
                    "begin": "2025-01-07T16:00:00",
                    "end": "2025-01-07T16:45:00"
                  },
                  {
                    "begin": "2025-01-07T17:00:00",
                    "end": "2025-01-07T17:45:00"
                  },
                  {
                    "begin": "2025-01-08T10:00:00",
                    "end": "2025-01-08T10:45:00"
                  },
                  {
                    "begin": "2025-01-08T11:00:00",
                    "end": "2025-01-08T11:45:00"
                  },
                  {
                    "begin": "2025-01-08T13:00:00",
                    "end": "2025-01-08T13:45:00"
                  },
                  {
                    "begin": "2025-01-08T14:00:00",
                    "end": "2025-01-08T14:45:00"
                  },
                  {
                    "begin": "2025-01-08T15:00:00",
                    "end": "2025-01-08T15:45:00"
                  },
                  {
                    "begin": "2025-01-08T16:00:00",
                    "end": "2025-01-08T16:45:00"
                  },
                  {
                    "begin": "2025-01-08T17:00:00",
                    "end": "2025-01-08T17:45:00"
                  },
                  {
                    "begin": "2025-01-09T10:00:00",
                    "end": "2025-01-09T10:45:00"
                  },
                  {
                    "begin": "2025-01-09T11:00:00",
                    "end": "2025-01-09T11:45:00"
                  },
                  {
                    "begin": "2025-01-09T13:00:00",
                    "end": "2025-01-09T13:45:00"
                  },
                  {
                    "begin": "2025-01-09T14:00:00",
                    "end": "2025-01-09T14:45:00"
                  },
                  {
                    "begin": "2025-01-09T15:00:00",
                    "end": "2025-01-09T15:45:00"
                  },
                  {
                    "begin": "2025-01-09T16:00:00",
                    "end": "2025-01-09T16:45:00"
                  },
                  {
                    "begin": "2025-01-09T17:00:00",
                    "end": "2025-01-09T17:45:00"
                  },
                  {
                    "begin": "2025-01-10T10:00:00",
                    "end": "2025-01-10T10:45:00"
                  },
                  {
                    "begin": "2025-01-10T11:00:00",
                    "end": "2025-01-10T11:45:00"
                  },
                  {
                    "begin": "2025-01-10T13:00:00",
                    "end": "2025-01-10T13:45:00"
                  },
                  {
                    "begin": "2025-01-10T14:00:00",
                    "end": "2025-01-10T14:45:00"
                  },
                  {
                    "begin": "2025-01-10T15:00:00",
                    "end": "2025-01-10T15:45:00"
                  },
                  {
                    "begin": "2025-01-10T16:00:00",
                    "end": "2025-01-10T16:45:00"
                  },
                  {
                    "begin": "2025-01-10T17:00:00",
                    "end": "2025-01-10T17:45:00"
                  },
                  {
                    "begin": "2025-01-13T10:00:00",
                    "end": "2025-01-13T10:45:00"
                  },
                  {
                    "begin": "2025-01-13T11:00:00",
                    "end": "2025-01-13T11:45:00"
                  },
                  {
                    "begin": "2025-01-13T13:00:00",
                    "end": "2025-01-13T13:45:00"
                  },
                  {
                    "begin": "2025-01-13T14:00:00",
                    "end": "2025-01-13T14:45:00"
                  },
                  {
                    "begin": "2025-01-13T15:00:00",
                    "end": "2025-01-13T15:45:00"
                  },
                  {
                    "begin": "2025-01-13T16:00:00",
                    "end": "2025-01-13T16:45:00"
                  },
                  {
                    "begin": "2025-01-13T17:00:00",
                    "end": "2025-01-13T17:45:00"
                  },
                  {
                    "begin": "2025-01-14T10:00:00",
                    "end": "2025-01-14T10:45:00"
                  },
                  {
                    "begin": "2025-01-14T11:00:00",
                    "end": "2025-01-14T11:45:00"
                  },
                  {
                    "begin": "2025-01-14T13:00:00",
                    "end": "2025-01-14T13:45:00"
                  },
                  {
                    "begin": "2025-01-14T14:00:00",
                    "end": "2025-01-14T14:45:00"
                  },
                  {
                    "begin": "2025-01-14T15:00:00",
                    "end": "2025-01-14T15:45:00"
                  },
                  {
                    "begin": "2025-01-14T16:00:00",
                    "end": "2025-01-14T16:45:00"
                  },
                  {
                    "begin": "2025-01-14T17:00:00",
                    "end": "2025-01-14T17:45:00"
                  }
                ],
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "CameraInput": {
      "object_type": "class",
      "description": "Camera input widget for capturing images or videos directly from a camera.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the input.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether a file must be uploaded before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the input should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "max_file_size",
            "type": "Optional[int]",
            "description": "Maximum file size in bytes.",
            "default": "None",
            "required": false
          },
          {
            "name": "multiple",
            "type": "bool",
            "description": "Whether multiple files can be uploaded.",
            "default": "False",
            "required": false
          },
          {
            "name": "min",
            "type": "Optional[int]",
            "description": "Minimum number of files required when multiple=True.",
            "default": "None",
            "required": false
          },
          {
            "name": "max",
            "type": "Optional[int]",
            "description": "Maximum number of files allowed when multiple=True.",
            "default": "None",
            "required": false
          },
          {
            "name": "accepted_formats",
            "type": "Optional[List[str]]",
            "description": "List of accepted file extensions.",
            "default": "None",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "Union[FileResponse, List[FileResponse], None]",
          "description": "The captured image or video file(s). FileResponse is a dictionary-like object: `{'name': str, 'path': pathlib.Path}`. If `multiple` is True, will be a list, otherwise a single FileResponse object."
        }
      },
      "parent_classes": [
        "FileInput",
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import CameraInput, run\n\n# Create a page with the widget\nexample_page = [\n    CameraInput(label=\"Camera Input\", key=\"my-camera_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "camera-input",
                "key": "my-camera_input",
                "hint": null,
                "label": "Camera Input",
                "value": [],
                "required": true,
                "multiple": false,
                "min": null,
                "max": null,
                "acceptedFormats": null,
                "acceptedMimeTypes": "*",
                "fullWidth": false,
                "disabled": false,
                "maxFileSize": null,
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "CardsInput": {
      "object_type": "class",
      "description": "Card selection input widget for choosing from visual card options.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the cards.",
            "default": "None",
            "required": true
          },
          {
            "name": "options",
            "type": "List[CardOption]",
            "description": "List of card options to display. CardOption is a Dict with the following structure: `TypedDict({\"title\": str, \"subtitle\": str, \"image\": str, \"description\": str, \"topLeftExtra\": str, \"topRightExtra\": str})`",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether a card selection is required before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "searchable",
            "type": "bool",
            "description": "Whether cards can be filtered by search.",
            "default": "False",
            "required": false
          },
          {
            "name": "multiple",
            "type": "bool",
            "description": "Whether multiple cards can be selected.",
            "default": "False",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "columns",
            "type": "Optional[int]",
            "description": "Number of columns to display cards in.",
            "default": "2",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the cards should take up the full width of their container.",
            "default": "False",
            "required": false
          },
          {
            "name": "layout",
            "type": "Optional[str]",
            "description": "Layout style for the cards ('list' or 'grid').",
            "default": "'list'",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "min",
            "type": "Optional[int]",
            "description": "Minimum number of cards that must be selected when multiple=True.",
            "default": "None",
            "required": false
          },
          {
            "name": "max",
            "type": "Optional[int]",
            "description": "Maximum number of cards that can be selected when multiple=True.",
            "default": "None",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "Union[List[CardOption], CardOption, None]",
          "description": "The selected card option(s). CardOption is a Dict with the following structure: `{\"title\": str, \"subtitle\": str, \"image\": str, \"description\": str, \"topLeftExtra\": str, \"topRightExtra\": str}`"
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import CardsInput, run\n\n# Create a page with the widget\nexample_page = [\n    CardsInput(\n        \"Choose your favorite dessert\",\n        [\n            {\n                \"title\": \"Crepe\",\n                \"subtitle\": \"French\",\n                \"image\": \"https://cdn.pixabay.com/photo/2017/01/30/13/56/pancakes-2020870_1280.jpg\",\n                \"description\": \"A crêpe or crepe is a type of very thin pancake.\",\n            },\n            {\n                \"title\": \"Pancake\",\n                \"subtitle\": \"American\",\n                \"image\": \"https://cdn.pixabay.com/photo/2018/07/10/21/23/pancake-3529653_1280.jpg\",\n                \"description\": \"A pancake is a flat cake, often thin and round.\",\n            },\n            {\n                \"title\": \"Waffle\",\n                \"subtitle\": \"Belgian\",\n                \"image\": \"https://cdn.pixabay.com/photo/2020/05/19/20/54/waffles-5192625_1280.jpg\",\n                \"description\": \"A waffle is a patterned dish made from leavened batter or dough.\",\n            },\n        ],\n    )\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "cards-input",
                "key": "Choose your favorite dessert",
                "label": "Choose your favorite dessert",
                "hint": null,
                "options": [
                  {
                    "title": "Crepe",
                    "subtitle": "French",
                    "image": "https://cdn.pixabay.com/photo/2017/01/30/13/56/pancakes-2020870_1280.jpg",
                    "description": "A crêpe or crepe is a type of very thin pancake."
                  },
                  {
                    "title": "Pancake",
                    "subtitle": "American",
                    "image": "https://cdn.pixabay.com/photo/2018/07/10/21/23/pancake-3529653_1280.jpg",
                    "description": "A pancake is a flat cake, often thin and round."
                  },
                  {
                    "title": "Waffle",
                    "subtitle": "Belgian",
                    "image": "https://cdn.pixabay.com/photo/2020/05/19/20/54/waffles-5192625_1280.jpg",
                    "description": "A waffle is a patterned dish made from leavened batter or dough."
                  }
                ],
                "multiple": false,
                "searchable": false,
                "required": true,
                "columns": 2,
                "fullWidth": false,
                "layout": "list",
                "disabled": false,
                "errors": [],
                "min": null,
                "max": null,
                "value": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        },
        {
          "name": "Searchable",
          "description": "You may also add a search bar to the cards input widget.",
          "code": "from abstra.forms import CardsInput, run\n\n# Create a page with the widget\nexample_page = [\n    CardsInput(\n        \"Choose your favorite dessert\",\n        [\n            {\n                \"title\": \"Crepe\",\n                \"subtitle\": \"French\",\n                \"image\": \"https://cdn.pixabay.com/photo/2017/01/30/13/56/pancakes-2020870_1280.jpg\",\n                \"description\": \"A crêpe or crepe is a type of very thin pancake.\",\n            },\n            {\n                \"title\": \"Pancake\",\n                \"subtitle\": \"American\",\n                \"image\": \"https://cdn.pixabay.com/photo/2018/07/10/21/23/pancake-3529653_1280.jpg\",\n                \"description\": \"A pancake is a flat cake, often thin and round.\",\n            },\n            {\n                \"title\": \"Waffle\",\n                \"subtitle\": \"Belgian\",\n                \"image\": \"https://cdn.pixabay.com/photo/2020/05/19/20/54/waffles-5192625_1280.jpg\",\n                \"description\": \"A waffle is a patterned dish made from leavened batter or dough.\",\n            },\n        ],\n        multiple=True,\n        searchable=True,\n    )\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "cards-input",
                "key": "Choose your favorite dessert",
                "label": "Choose your favorite dessert",
                "hint": null,
                "options": [
                  {
                    "title": "Crepe",
                    "subtitle": "French",
                    "image": "https://cdn.pixabay.com/photo/2017/01/30/13/56/pancakes-2020870_1280.jpg",
                    "description": "A crêpe or crepe is a type of very thin pancake."
                  },
                  {
                    "title": "Pancake",
                    "subtitle": "American",
                    "image": "https://cdn.pixabay.com/photo/2018/07/10/21/23/pancake-3529653_1280.jpg",
                    "description": "A pancake is a flat cake, often thin and round."
                  },
                  {
                    "title": "Waffle",
                    "subtitle": "Belgian",
                    "image": "https://cdn.pixabay.com/photo/2020/05/19/20/54/waffles-5192625_1280.jpg",
                    "description": "A waffle is a patterned dish made from leavened batter or dough."
                  }
                ],
                "multiple": true,
                "searchable": true,
                "required": true,
                "columns": 2,
                "fullWidth": false,
                "layout": "list",
                "disabled": false,
                "errors": [],
                "min": null,
                "max": null,
                "value": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "CheckboxInput": {
      "object_type": "class",
      "description": "Checkbox input widget for capturing boolean values.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed next to the checkbox.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether the checkbox must be checked before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the checkbox.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the widget should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the checkbox is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[list, str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "bool",
          "description": "The boolean value indicating whether the checkbox is checked."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import CheckboxInput, run\n\n# Create a page with the widget\nexample_page = [\n    CheckboxInput(label=\"Checkbox Input\", key=\"my-checkbox_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "checkbox-input",
                "key": "my-checkbox_input",
                "label": "Checkbox Input",
                "value": false,
                "required": true,
                "hint": null,
                "fullWidth": false,
                "disabled": false,
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "ChecklistInput": {
      "object_type": "class",
      "description": "Checklist input widget for selecting multiple options from a list.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the checklist.",
            "default": "None",
            "required": true
          },
          {
            "name": "options",
            "type": "Union[List[LabelValueDict], List[str]]",
            "description": "List of options to choose from, either as {\"label\": str, \"value\": str} dictionaries or simple strings.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether at least one option must be selected before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the checklist.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the checklist should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the checklist is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "min",
            "type": "int",
            "description": "Minimum number of options that must be selected.",
            "default": "0",
            "required": false
          },
          {
            "name": "max",
            "type": "Optional[int]",
            "description": "Maximum number of options that can be selected.",
            "default": "None",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[List[str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "List[object]",
          "description": "The list of selected values."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import ChecklistInput, run\n\n# Create a page with the widget\nexample_page = [\n    ChecklistInput(\n        label=\"Checklist Input\",\n        key=\"my-checklist_input\",\n        options=[\"Option A\", \"Option B\", \"Option C\"],\n    ),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "checklist-input",
                "key": "my-checklist_input",
                "options": [
                  {
                    "label": "Option A",
                    "value": "0"
                  },
                  {
                    "label": "Option B",
                    "value": "1"
                  },
                  {
                    "label": "Option C",
                    "value": "2"
                  }
                ],
                "label": "Checklist Input",
                "value": [],
                "required": true,
                "hint": null,
                "fullWidth": false,
                "disabled": false,
                "errors": [],
                "min": 0,
                "max": 3
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "CnpjInput": {
      "object_type": "class",
      "description": "CNPJ (Brazilian company registry) input widget.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the input.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "placeholder",
            "type": "Optional[str]",
            "description": "Placeholder text displayed when the input is empty.",
            "default": "'00.000.000/0001-00'",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether the input must be filled before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the input should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "invalid_message",
            "type": "Optional[str]",
            "description": "Custom error message for invalid CNPJ numbers.",
            "default": "'i18n_error_invalid_cnpj'",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "str",
          "description": "The CNPJ number entered by the user."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import CnpjInput, run\n\n# Create a page with the widget\nexample_page = [\n    CnpjInput(label=\"Cnpj Input\", key=\"my-cnpj_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "cnpj-input",
                "key": "my-cnpj_input",
                "label": "Cnpj Input",
                "value": "",
                "placeholder": "00.000.000/0001-00",
                "required": true,
                "hint": null,
                "fullWidth": false,
                "disabled": false,
                "invalidMessage": "i18n_error_invalid_cnpj",
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "CodeInput": {
      "object_type": "class",
      "description": "Code input widget for entering code with syntax highlighting.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the input.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether the input must be filled before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "language",
            "type": "Optional[str]",
            "description": "Programming language for syntax highlighting. Eg. 'python', 'javascript', 'html'.",
            "default": "None",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the input should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "str",
          "description": "The code text entered by the user."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import CodeInput, run\n\n# Create a page with the widget\nexample_page = [\n    CodeInput(label=\"Code Input\", key=\"my-code_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "code-input",
                "key": "my-code_input",
                "label": "Code Input",
                "value": "",
                "language": null,
                "required": true,
                "hint": null,
                "fullWidth": false,
                "disabled": false,
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "CpfInput": {
      "object_type": "class",
      "description": "CPF (Brazilian individual taxpayer registry) input widget.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the input.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "placeholder",
            "type": "Optional[str]",
            "description": "Placeholder text displayed when the input is empty.",
            "default": "'000.000.000-00'",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether the input must be filled before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the input should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "invalid_message",
            "type": "Optional[str]",
            "description": "Custom error message for invalid CPF numbers.",
            "default": "'i18n_error_invalid_cpf'",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "str",
          "description": "The CPF number entered by the user."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import CpfInput, run\n\n# Create a page with the widget\nexample_page = [\n    CpfInput(label=\"Cpf Input\", key=\"my-cpf_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "cpf-input",
                "key": "my-cpf_input",
                "label": "Cpf Input",
                "value": "",
                "placeholder": "000.000.000-00",
                "required": true,
                "hint": null,
                "fullWidth": false,
                "disabled": false,
                "invalidMessage": "i18n_error_invalid_cpf",
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "CurrencyInput": {
      "object_type": "class",
      "description": "Currency input widget for entering monetary values.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the input.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether the input must be filled before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "placeholder",
            "type": "Optional[str]",
            "description": "Placeholder text displayed when the input is empty.",
            "default": "''",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the input should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "min",
            "type": "Optional[float]",
            "description": "Minimum allowed value.",
            "default": "None",
            "required": false
          },
          {
            "name": "max",
            "type": "Optional[float]",
            "description": "Maximum allowed value.",
            "default": "None",
            "required": false
          },
          {
            "name": "currency",
            "type": "str",
            "description": "Currency code to use for formatting (e.g., \"USD\", \"EUR\").",
            "default": "'USD'",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "Optional[float]",
          "description": "The currency value entered by the user."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import CurrencyInput, run\n\n# Create a page with the widget\nexample_page = [\n    CurrencyInput(label=\"Currency Input\", key=\"my-currency_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "currency-input",
                "key": "my-currency_input",
                "label": "Currency Input",
                "value": null,
                "placeholder": "",
                "required": true,
                "hint": null,
                "fullWidth": false,
                "min": null,
                "max": null,
                "currency": "USD",
                "disabled": false,
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "CustomInput": {
      "object_type": "class",
      "description": "Custom HTML input widget for creating custom interactive components.",
      "init": {
        "params": [
          {
            "name": "html_body",
            "type": "str",
            "description": "HTML content for the body of the custom component.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to hash of html_body if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether the component must be filled before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the component.",
            "default": "''",
            "required": false
          },
          {
            "name": "html_head",
            "type": "str",
            "description": "HTML content for the head section.",
            "default": "''",
            "required": false
          },
          {
            "name": "height",
            "type": "int",
            "description": "Height of the component in pixels.",
            "default": "200",
            "required": false
          },
          {
            "name": "css",
            "type": "str",
            "description": "CSS styles for the component.",
            "default": "''",
            "required": false
          },
          {
            "name": "js",
            "type": "str",
            "description": "JavaScript code for the component.",
            "default": "''",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the component should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "change_event",
            "type": "Optional[Callable]",
            "description": "Function to process value changes before storing.",
            "default": "None",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "Any",
          "description": "The value returned by the custom component."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a CustomInput that gets the current date from the user's browser",
          "code": "from abstra.forms import CustomInput, run\n\nhtml = \"\"\"\n<button id='date-btn'>Get current date</button>\n\"\"\"\n\njs = \"\"\"\ndocument.getElementById('date-btn').addEventListener('click',function() {\n        const date = new Date();\n        const day = date.getDate();\n        const month = date.getMonth() + 1;\n        const year = date.getFullYear();\n\n        changeEvent(day + '/' + month + '/' + year);\n    });\n\"\"\"\n\ncss = \"\"\"\nbody {\n        margin: 0;\n        padding: 0;\n    }\n\n    #date-btn {\n        cursor: pointer;\n        background-color: #343b46;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        padding: 15px 32px;\n        text-align: center;\n        text-decoration: none;\n        display: inline-block;\n        font-size: 16px;\n    }\n\n    #date-btn:hover {\n        background-color: #3e4756;\n    }\n\"\"\"\n\n\n# Create a page with the widget\nexample_page = [\n    CustomInput(\n        html_body=html,\n        js=js,\n        css=css,\n        key=\"my-custom-input\",\n    ),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "custom-input",
                "key": "my-custom-input",
                "label": "",
                "value": null,
                "required": true,
                "htmlBody": "\n<button id='date-btn'>Get current date</button>\n",
                "height": 200,
                "htmlHead": "",
                "css": "\nbody {\n        margin: 0;\n        padding: 0;\n    }\n\n    #date-btn {\n        cursor: pointer;\n        background-color: #343b46;\n        border: none;\n        border-radius: 4px;\n        color: white;\n        padding: 15px 32px;\n        text-align: center;\n        text-decoration: none;\n        display: inline-block;\n        font-size: 16px;\n    }\n\n    #date-btn:hover {\n        background-color: #3e4756;\n    }\n",
                "js": "\ndocument.getElementById('date-btn').addEventListener('click',function() {\n        const date = new Date();\n        const day = date.getDate();\n        const month = date.getMonth() + 1;\n        const year = date.getFullYear();\n\n        changeEvent(day + '/' + month + '/' + year);\n    });\n",
                "fullWidth": false,
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "DateInput": {
      "object_type": "class",
      "description": "Date input widget with calendar picker.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the input.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether a date must be selected before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the input should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          },
          {
            "name": "min_date",
            "type": "Optional[datetime.date]",
            "description": "Earliest selectable date.",
            "default": "None",
            "required": false
          },
          {
            "name": "max_date",
            "type": "Optional[datetime.date]",
            "description": "Latest selectable date.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "Optional[datetime.date]",
          "description": "The date value selected by the user."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import DateInput, run\n\n# Create a page with the widget\nexample_page = [\n    DateInput(label=\"Date Input\", key=\"my-date_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "date-input",
                "key": "my-date_input",
                "hint": null,
                "label": "Date Input",
                "value": "",
                "required": true,
                "fullWidth": false,
                "disabled": false,
                "errors": [],
                "minDate": null,
                "maxDate": null
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "DropdownInput": {
      "object_type": "class",
      "description": "Dropdown select widget allowing selection from predefined options.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the dropdown.",
            "default": "None",
            "required": true
          },
          {
            "name": "options",
            "type": "Union[List[LabelValueDict], List[str]]",
            "description": "List of options to choose from, either as {\"label\": str, \"value\": str} dictionaries or simple strings.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether a selection is required before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the dropdown.",
            "default": "None",
            "required": false
          },
          {
            "name": "placeholder",
            "type": "str",
            "description": "Text shown when no option is selected.",
            "default": "''",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the dropdown should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the dropdown is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "multiple",
            "type": "bool",
            "description": "Whether multiple options can be selected.",
            "default": "False",
            "required": false
          },
          {
            "name": "min",
            "type": "Optional[int]",
            "description": "Minimum number of selections required when multiple=True.",
            "default": "None",
            "required": false
          },
          {
            "name": "max",
            "type": "Optional[int]",
            "description": "Maximum number of selections allowed when multiple=True.",
            "default": "None",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "Union[List[object], object, None]",
          "description": "The selected value(s) from the dropdown options. If `multiple` is True, this can be a list of values; otherwise, it is a single value or None."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import DropdownInput, run\n\n# Create a page with the widget\nexample_page = [\n    DropdownInput(\n        label=\"Dropdown Input\",\n        key=\"my-dropdown_input\",\n        options=[\"Option A\", \"Option B\", \"Option C\"],\n    ),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "dropdown-input",
                "key": "my-dropdown_input",
                "label": "Dropdown Input",
                "options": [
                  {
                    "label": "Option A",
                    "value": "0"
                  },
                  {
                    "label": "Option B",
                    "value": "1"
                  },
                  {
                    "label": "Option C",
                    "value": "2"
                  }
                ],
                "hint": null,
                "multiple": false,
                "placeholder": "",
                "value": [],
                "required": true,
                "fullWidth": false,
                "disabled": false,
                "errors": [],
                "min": null,
                "max": null
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "EmailInput": {
      "object_type": "class",
      "description": "Email input widget for capturing email addresses.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the input.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "placeholder",
            "type": "str",
            "description": "Placeholder text displayed when the input is empty.",
            "default": "''",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether the input must be filled before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the input should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          },
          {
            "name": "max_length",
            "type": "Optional[int]",
            "description": "Maximum number of characters allowed.",
            "default": "None",
            "required": false
          },
          {
            "name": "min_length",
            "type": "Optional[int]",
            "description": "Minimum number of characters required.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "str",
          "description": "The email address entered by the user."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import EmailInput, run\n\n# Create a page with the widget\nexample_page = [\n    EmailInput(label=\"Email Input\", key=\"my-email_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "email-input",
                "key": "my-email_input",
                "label": "Email Input",
                "value": "",
                "placeholder": "",
                "required": true,
                "hint": null,
                "fullWidth": false,
                "disabled": false,
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "FileInput": {
      "object_type": "class",
      "description": "File upload input widget for handling file uploads.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the input.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether a file must be uploaded before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the input should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "max_file_size",
            "type": "Optional[int]",
            "description": "Maximum file size in bytes.",
            "default": "None",
            "required": false
          },
          {
            "name": "multiple",
            "type": "bool",
            "description": "Whether multiple files can be uploaded.",
            "default": "False",
            "required": false
          },
          {
            "name": "min",
            "type": "Optional[int]",
            "description": "Minimum number of files required when multiple=True.",
            "default": "None",
            "required": false
          },
          {
            "name": "max",
            "type": "Optional[int]",
            "description": "Maximum number of files allowed when multiple=True.",
            "default": "None",
            "required": false
          },
          {
            "name": "accepted_formats",
            "type": "Optional[List[str]]",
            "description": "List of accepted file extensions.",
            "default": "None",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "Union[FileResponse, List[FileResponse], None]",
          "description": "The uploaded file(s). FileResponse is a dictionary-like object: `{'name': str, 'path': pathlib.Path}`. If `multiple` is True, will be a list, otherwise a single FileResponse object."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import FileInput, run\n\n# Create a page with the widget\nexample_page = [\n    FileInput(label=\"File Input\", key=\"my-file_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "file-input",
                "key": "my-file_input",
                "hint": null,
                "label": "File Input",
                "value": [],
                "required": true,
                "multiple": false,
                "min": null,
                "max": null,
                "acceptedFormats": null,
                "acceptedMimeTypes": "*",
                "fullWidth": false,
                "disabled": false,
                "maxFileSize": null,
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        },
        {
          "name": "Using the output of a FileInput",
          "description": "This example runs a form with two pages. The first page requests a file and a filename from the user. The second page saves the file in the persistent directory with the given filename and sends a task with the file path.",
          "code": "import os\n\nfrom abstra.common import get_persistent_dir\nfrom abstra.forms import FileInput, TextInput, run\nfrom abstra.tasks import send_task\n\n# Create a page to input a file and choose its filename\nexample_page = [\n    TextInput(label=\"Choose a filename\", key=\"filename\"),\n    FileInput(label=\"File input\", key=\"my-file\"),\n]\n\n\n# Save the inputted file in the persistent dir and send its path\ndef save_inputed_file(state):\n    # Get information from the previous page\n    inputted_file = state.get(\"my-file\")\n    custom_filename = state.get(\"filename\")\n\n    # Compute the inputted file's extension\n    file_name = inputted_file.name\n    _, file_extension = os.path.splitext(file_name)\n\n    # Save in persistent dir\n    pdir_path = get_persistent_dir()\n    file_path = f\"{pdir_path}/{custom_filename}{file_extension}\"\n    with open(file_path, \"wb\") as f:\n        file_object = inputted_file.file\n        f.write(file_object.read())\n\n    # Send task with the persistent file path\n    send_task(\"file\", {\"file_path\": file_path})\n\n\n# Run the form\nresult = run([example_page, save_inputed_file])"
        }
      ]
    },
    "FileOutput": {
      "object_type": "class",
      "description": "File output widget for displaying downloadable files.",
      "init": {
        "params": [
          {
            "name": "file",
            "type": "Union[str, io.IOBase]",
            "description": "The file to make available for download, as a URL or file-like object.",
            "default": "None",
            "required": true
          },
          {
            "name": "download_text",
            "type": "str",
            "description": "Text displayed on the download button.",
            "default": "'Download'",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the download button should take up the full width of its container.",
            "default": "False",
            "required": false
          }
        ]
      },
      "properties": {
        "file": {
          "name": "file",
          "type": "str",
          "description": "The URL of the file to make available for download."
        }
      },
      "parent_classes": [
        "OutputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget for selecting .xlsx files",
          "code": "from abstra.forms import FileOutput, run\n\n# Create a page with the widget\nexample_page = [\n    FileOutput(\n        \"https://http.cat/status/200.jpg\",\n        download_text=\"Click here to download the image\",\n    )\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "file-output",
                "fileUrl": "https://http.cat/status/200.jpg",
                "downloadText": "Click here to download the image",
                "fullWidth": false
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "HtmlOutput": {
      "object_type": "class",
      "description": "HTML output widget for displaying custom HTML content.",
      "init": {
        "params": [
          {
            "name": "html",
            "type": "str",
            "description": "The HTML content to display.",
            "default": "None",
            "required": true
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the content should take up the full width of its container.",
            "default": "False",
            "required": false
          }
        ]
      },
      "properties": {
        "html": {
          "name": "html",
          "type": "str",
          "description": "The HTML content to display."
        }
      },
      "parent_classes": [
        "OutputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import HtmlOutput, run\n\nmy_html = \"\"\"\n<div>\n    <h1>HTML Output</h1>\n    <p>This is a simple HTML output example.</p>\n    <ul>\n        <li>Item 1</li>\n        <li>Item 2</li>\n        <li>Item 3</li>\n    </ul>\n</div>\n\"\"\"\n\n# Create a page with the widget\nexample_page = [\n    HtmlOutput(my_html),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "html-output",
                "html": "\n<div>\n    <h1>HTML Output</h1>\n    <p>This is a simple HTML output example.</p>\n    <ul>\n        <li>Item 1</li>\n        <li>Item 2</li>\n        <li>Item 3</li>\n    </ul>\n</div>\n",
                "fullWidth": false
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "IframeOutput": {
      "object_type": "class",
      "description": "Iframe output widget for embedding external web content or HTML.",
      "init": {
        "params": [
          {
            "name": "url_or_html",
            "type": "str",
            "description": "The URL to embed or HTML content to display in the iframe.",
            "default": "None",
            "required": true
          },
          {
            "name": "width",
            "type": "int",
            "description": "Width of the iframe in pixels.",
            "default": "800",
            "required": false
          },
          {
            "name": "height",
            "type": "int",
            "description": "Height of the iframe in pixels.",
            "default": "600",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the iframe should take up the full width of its container.",
            "default": "False",
            "required": false
          }
        ]
      },
      "properties": {
        "url": {
          "name": "url",
          "type": "str",
          "description": "The URL or data URI of the iframe content."
        }
      },
      "parent_classes": [
        "OutputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import IframeOutput, run\n\nurl = \"https://www.google.com/maps/embed?pb=!1m16!1m12!1m3!1d2965.0824050173574!2d-93.63905729999999!3d41.998507000000004!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!2m1!1sWebFilings%2C+University+Boulevard%2C+Ames%2C+IA!5e0!3m2!1sen!2sus!4v1390839289319\"\n\n# Create a page with the widget\nexample_page = [IframeOutput(url, width=\"300\", height=\"250\")]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "iframe-output",
                "url": "https://www.google.com/maps/embed?pb=!1m16!1m12!1m3!1d2965.0824050173574!2d-93.63905729999999!3d41.998507000000004!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!2m1!1sWebFilings%2C+University+Boulevard%2C+Ames%2C+IA!5e0!3m2!1sen!2sus!4v1390839289319",
                "width": "300",
                "height": "250",
                "fullWidth": false
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "ImageInput": {
      "object_type": "class",
      "description": "Image upload input widget for handling image file uploads.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the input.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether a file must be uploaded before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the input should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "max_file_size",
            "type": "Optional[int]",
            "description": "Maximum file size in bytes.",
            "default": "None",
            "required": false
          },
          {
            "name": "multiple",
            "type": "bool",
            "description": "Whether multiple files can be uploaded.",
            "default": "False",
            "required": false
          },
          {
            "name": "min",
            "type": "Optional[int]",
            "description": "Minimum number of files required when multiple=True.",
            "default": "None",
            "required": false
          },
          {
            "name": "max",
            "type": "Optional[int]",
            "description": "Maximum number of files allowed when multiple=True.",
            "default": "None",
            "required": false
          },
          {
            "name": "accepted_formats",
            "type": "Optional[List[str]]",
            "description": "List of accepted file extensions.",
            "default": "None",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "Union[FileResponse, List[FileResponse], None]",
          "description": "The uploaded image file(s). FileResponse is a dictionary-like object: `{'name': str, 'path': pathlib.Path}`. If `multiple` is True, will be a list, otherwise a single FileResponse object."
        }
      },
      "parent_classes": [
        "FileInput",
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import ImageInput, run\n\n# Create a page with the widget\nexample_page = [\n    ImageInput(label=\"Image Input\", key=\"my-image_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "image-input",
                "key": "my-image_input",
                "hint": null,
                "label": "Image Input",
                "value": [],
                "required": true,
                "multiple": false,
                "min": null,
                "max": null,
                "acceptedFormats": null,
                "acceptedMimeTypes": "*",
                "fullWidth": false,
                "disabled": false,
                "maxFileSize": null,
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "ImageOutput": {
      "object_type": "class",
      "description": "Image output widget for displaying images.",
      "init": {
        "params": [
          {
            "name": "image",
            "type": "Union[str, io.IOBase]",
            "description": "The image to display, as a URL or file-like object.",
            "default": "None",
            "required": true
          },
          {
            "name": "subtitle",
            "type": "str",
            "description": "Text displayed below the image.",
            "default": "''",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the image should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "label",
            "type": "str",
            "description": "Text displayed above the image.",
            "default": "''",
            "required": false
          }
        ]
      },
      "properties": {
        "image": {
          "name": "image",
          "type": "str",
          "description": "The URL of the image to display."
        }
      },
      "parent_classes": [
        "OutputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import ImageOutput, run\n\n# Create a page with the widget\nexample_page = [\n    ImageOutput(\"https://http.cat/status/200.jpg\", subtitle=\"This is a cat\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "image-output",
                "imageUrl": "https://http.cat/status/200.jpg",
                "subtitle": "This is a cat",
                "fullWidth": false,
                "label": ""
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "LatexOutput": {
      "object_type": "class",
      "description": "LaTeX output widget for displaying mathematical notation.",
      "init": {
        "params": [
          {
            "name": "text",
            "type": "str",
            "description": "The LaTeX content to display.",
            "default": "None",
            "required": true
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the content should take up the full width of its container.",
            "default": "False",
            "required": false
          }
        ]
      },
      "properties": {
        "text": {
          "name": "text",
          "type": "str",
          "description": "The LaTeX content to display."
        }
      },
      "parent_classes": [
        "OutputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import LatexOutput, run\n\n# Create a page with the widget\nexample_page = [\n    LatexOutput(r\"\\(ax^2 + bx + c = 0\\)\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "latex-output",
                "text": "\\(ax^2 + bx + c = 0\\)",
                "fullWidth": false
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        },
        {
          "name": "With Text",
          "description": "LatexOutput can be used to display LaTeX math equations and text.",
          "code": "from abstra.forms import LatexOutput, run\n\n# Create a page with the widget\nexample_page = [\n    LatexOutput(\n        r\"\"\"When \\(a \\\\ne 0\\), there are two solutions to \\(ax^2 + bx + c = 0\\) and they are $$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$\"\"\"\n    ),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "latex-output",
                "text": "When \\(a \\\\ne 0\\), there are two solutions to \\(ax^2 + bx + c = 0\\) and they are $$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$",
                "fullWidth": false
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "LinkOutput": {
      "object_type": "class",
      "description": "Link output widget for displaying clickable hyperlinks.",
      "init": {
        "params": [
          {
            "name": "link_url",
            "type": "str",
            "description": "The URL that the link points to.",
            "default": "None",
            "required": true
          },
          {
            "name": "link_text",
            "type": "str",
            "description": "The visible text of the link.",
            "default": "'Click here'",
            "required": false
          },
          {
            "name": "same_tab",
            "type": "bool",
            "description": "Whether the link should open in the same tab.",
            "default": "False",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the link should take up the full width of its container.",
            "default": "False",
            "required": false
          }
        ]
      },
      "properties": {
        "link_url": {
          "name": "link_url",
          "type": "str",
          "description": "The URL that the link points to."
        },
        "link_text": {
          "name": "link_text",
          "type": "str",
          "description": "The visible text of the link."
        }
      },
      "parent_classes": [
        "OutputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import LinkOutput, run\n\n# Create a page with the widget\nexample_page = [\n    LinkOutput(\"https://abstra.io\", link_text=\"Abstra Homepage\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "link-output",
                "linkText": "Abstra Homepage",
                "linkUrl": "https://abstra.io",
                "sameTab": false,
                "fullWidth": false
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "ListInput": {
      "object_type": "class",
      "description": "Repeatable list of input components that can be dynamically added or removed.",
      "init": {
        "params": [
          {
            "name": "key",
            "type": "str",
            "description": "Identifier for the widget.",
            "default": "None",
            "required": true
          },
          {
            "name": "template",
            "type": "Union[Template, TemplateFunction]",
            "description": "Template or function that returns a template for each list item.",
            "default": "None",
            "required": true
          },
          {
            "name": "min",
            "type": "Optional[int]",
            "description": "Minimum number of items required.",
            "default": "0",
            "required": false
          },
          {
            "name": "max",
            "type": "Optional[int]",
            "description": "Maximum number of items allowed.",
            "default": "None",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "add_button_text",
            "type": "str",
            "description": "Text displayed on the button to add a new item.",
            "default": "'+'",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the input should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether at least one item is required.",
            "default": "True",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "List[State]",
          "description": "The list of states for each item in the list. State is a dictionary-like object that holds the values for each input in the list indexed by their keys."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import ListInput, NumberInput, TextInput, run\n\nitem_template = [\n    TextInput(\"Item Name\", key=\"item_name\"),\n    NumberInput(\"Item Quantity\", key=\"item_quantity\"),\n]\n\n# Create a page with the widget\nexample_page = [ListInput(key=\"my-list\", template=item_template, min=2)]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "list-input",
                "key": "my-list",
                "hint": null,
                "errors": [],
                "min": 2,
                "max": null,
                "addButtonText": "+",
                "fullWidth": false,
                "required": true,
                "disabled": false,
                "schemas": [
                  [
                    {
                      "type": "text-input",
                      "key": "item_name",
                      "label": "Item Name",
                      "value": "",
                      "placeholder": "",
                      "required": true,
                      "hint": null,
                      "fullWidth": false,
                      "mask": null,
                      "maxLength": null,
                      "minLength": null,
                      "disabled": false,
                      "errors": []
                    },
                    {
                      "type": "number-input",
                      "key": "item_quantity",
                      "label": "Item Quantity",
                      "value": null,
                      "placeholder": null,
                      "required": true,
                      "hint": null,
                      "fullWidth": false,
                      "min": null,
                      "max": null,
                      "disabled": false,
                      "errors": []
                    }
                  ],
                  [
                    {
                      "type": "text-input",
                      "key": "item_name",
                      "label": "Item Name",
                      "value": "",
                      "placeholder": "",
                      "required": true,
                      "hint": null,
                      "fullWidth": false,
                      "mask": null,
                      "maxLength": null,
                      "minLength": null,
                      "disabled": false,
                      "errors": []
                    },
                    {
                      "type": "number-input",
                      "key": "item_quantity",
                      "label": "Item Quantity",
                      "value": null,
                      "placeholder": null,
                      "required": true,
                      "hint": null,
                      "fullWidth": false,
                      "min": null,
                      "max": null,
                      "disabled": false,
                      "errors": []
                    }
                  ]
                ],
                "value": [
                  {
                    "item_name": "",
                    "item_quantity": null
                  },
                  {
                    "item_name": "",
                    "item_quantity": null
                  }
                ]
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "MarkdownOutput": {
      "object_type": "class",
      "description": "Markdown output widget for displaying formatted text.",
      "init": {
        "params": [
          {
            "name": "text",
            "type": "str",
            "description": "The markdown content to display.",
            "default": "None",
            "required": true
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the content should take up the full width of its container.",
            "default": "False",
            "required": false
          }
        ]
      },
      "properties": {
        "text": {
          "name": "text",
          "type": "str",
          "description": "The markdown content to display."
        }
      },
      "parent_classes": [
        "OutputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import MarkdownOutput, run\n\ntext = \"\"\"\n## Markdown Output\n\n* 1^th^ H~2~0\n\n- [ ] Task\n\n* ==Mark==\n\n`code`\n\n* [Link](https://www.abstracloud.com/)\n\"\"\"\n\n# Create a page with the widget\nexample_page = [MarkdownOutput(text)]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "markdown-output",
                "text": "\n## Markdown Output\n\n* 1^th^ H~2~0\n\n- [ ] Task\n\n* ==Mark==\n\n`code`\n\n* [Link](https://www.abstracloud.com/)\n",
                "fullWidth": false
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "MultipleChoiceInput": {
      "object_type": "class",
      "description": "Multiple choice input widget for selecting a single option from a set of radio buttons.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the options.",
            "default": "None",
            "required": true
          },
          {
            "name": "options",
            "type": "Union[List[LabelValueDict], List[str]]",
            "description": "List of options to choose from, either as {\"label\": str, \"value\": str} dictionaries or simple strings.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether an option must be selected before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the options.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the widget should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the widget is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "multiple",
            "type": "bool",
            "description": "Whether multiple options can be selected.",
            "default": "False",
            "required": false
          },
          {
            "name": "min",
            "type": "Optional[int]",
            "description": "Minimum number of options that can be selected.",
            "default": "None",
            "required": false
          },
          {
            "name": "max",
            "type": "Optional[int]",
            "description": "Maximum number of options that can be selected.",
            "default": "None",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "Optional[Union[List[Any], Any, None]]",
          "description": "The selected option value. If `multiple` is True, this can be a list of values; otherwise, it is a single value or None."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import MultipleChoiceInput, run\n\n# Create a page with the widget\nexample_page = [\n    MultipleChoiceInput(\n        label=\"Multiple Choice Input\",\n        key=\"my-multiple_choice_input\",\n        options=[\"Option A\", \"Option B\", \"Option C\"],\n    ),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "multiple-choice-input",
                "key": "my-multiple_choice_input",
                "label": "Multiple Choice Input",
                "options": [
                  {
                    "label": "Option A",
                    "value": "0"
                  },
                  {
                    "label": "Option B",
                    "value": "1"
                  },
                  {
                    "label": "Option C",
                    "value": "2"
                  }
                ],
                "hint": null,
                "multiple": false,
                "value": [],
                "required": true,
                "fullWidth": false,
                "min": null,
                "max": null,
                "disabled": false,
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "NpsInput": {
      "object_type": "class",
      "description": "Net Promoter Score input widget for collecting customer feedback scores.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the input.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether a score must be selected before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "min",
            "type": "int",
            "description": "Minimum score value.",
            "default": "0",
            "required": false
          },
          {
            "name": "max",
            "type": "int",
            "description": "Maximum score value.",
            "default": "10",
            "required": false
          },
          {
            "name": "min_hint",
            "type": "str",
            "description": "Text displayed beneath the minimum score value.",
            "default": "'Not at all likely'",
            "required": false
          },
          {
            "name": "max_hint",
            "type": "str",
            "description": "Text displayed beneath the maximum score value.",
            "default": "'Extremely likely'",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the input should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          },
          {
            "name": "value",
            "type": "int",
            "description": "Initial value of the score.",
            "default": "0",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "int",
          "description": "The NPS score selected by the user."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import NpsInput, run\n\n# Create a page with the widget\nexample_page = [\n    NpsInput(label=\"Nps Input\", key=\"my-nps_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "nps-input",
                "key": "my-nps_input",
                "label": "Nps Input",
                "min": 0,
                "max": 10,
                "minHint": "Not at all likely",
                "maxHint": "Extremely likely",
                "value": 0,
                "required": true,
                "hint": null,
                "fullWidth": false,
                "disabled": false,
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "NumberInput": {
      "object_type": "class",
      "description": "Number input widget for capturing numeric values.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the input.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "placeholder",
            "type": "Optional[str]",
            "description": "Placeholder text displayed when the input is empty.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether the input must be filled before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the input should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "min",
            "type": "Optional[float]",
            "description": "Minimum allowed value.",
            "default": "None",
            "required": false
          },
          {
            "name": "max",
            "type": "Optional[float]",
            "description": "Maximum allowed value.",
            "default": "None",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "Union[float, None]",
          "description": "The numeric value entered by the user. Can be None if `required` is False."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import NumberInput, run\n\n# Create a page with the widget\nexample_page = [\n    NumberInput(label=\"Number Input\", key=\"my-number_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "number-input",
                "key": "my-number_input",
                "label": "Number Input",
                "value": null,
                "placeholder": null,
                "required": true,
                "hint": null,
                "fullWidth": false,
                "min": null,
                "max": null,
                "disabled": false,
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "NumberSliderInput": {
      "object_type": "class",
      "description": "Number slider input widget for selecting numeric values with a sliding control.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the slider.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether the slider must be adjusted before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the slider.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the slider should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the slider is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          },
          {
            "name": "min",
            "type": "float",
            "description": "Minimum value for the slider.",
            "default": "0",
            "required": false
          },
          {
            "name": "max",
            "type": "float",
            "description": "Maximum value for the slider.",
            "default": "100",
            "required": false
          },
          {
            "name": "step",
            "type": "float",
            "description": "Step increment for the slider.",
            "default": "1",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "float",
          "description": "The numeric value selected by the user."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import NumberSliderInput, run\n\n# Create a page with the widget\nexample_page = [\n    NumberSliderInput(label=\"Number Slider Input\", key=\"my-number_slider_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "number-slider-input",
                "key": "my-number_slider_input",
                "label": "Number Slider Input",
                "value": 0,
                "required": true,
                "hint": null,
                "fullWidth": false,
                "min": 0,
                "max": 100,
                "step": 1,
                "disabled": false,
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "PandasOutput": {
      "object_type": "class",
      "description": "Pandas DataFrame output widget for displaying tabular data.",
      "init": {
        "params": [
          {
            "name": "df",
            "type": "pd.DataFrame",
            "description": "The pandas DataFrame to display.",
            "default": "None",
            "required": true
          },
          {
            "name": "label",
            "type": "Optional[str]",
            "description": "Text label displayed above the table.",
            "default": "None",
            "required": false
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget.",
            "default": "None",
            "required": false
          },
          {
            "name": "actions",
            "type": "Optional[List[dict]]",
            "description": "List of action configurations.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the table should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "display_index",
            "type": "bool",
            "description": "Whether to display row indices.",
            "default": "True",
            "required": false
          },
          {
            "name": "filterable",
            "type": "bool",
            "description": "Whether the table is filterable.",
            "default": "True",
            "required": false
          },
          {
            "name": "page_size",
            "type": "int",
            "description": "Number of rows to display per page.",
            "default": "10",
            "required": false
          },
          {
            "name": "pagination_always_visible",
            "type": "bool",
            "description": "Whether pagination controls are always visible.",
            "default": "True",
            "required": false
          }
        ]
      },
      "properties": {
        "df": {
          "name": "df",
          "type": "pd.DataFrame",
          "description": "The pandas DataFrame to display."
        }
      },
      "parent_classes": [
        "OutputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "import pandas as pd\n\nfrom abstra.forms import PandasOutput, run\n\ndata = [\n    {\"Country\": \"USA\", \"Population\": \"32,700,000\"},\n    {\"Country\": \"China\", \"Population\": \"1,300,000,000\"},\n    {\"Country\": \"Japan\", \"Population\": \"126,000,000\"},\n]\ndf = pd.DataFrame(data)\n\n# Create a page with the widget\nexample_page = [\n    PandasOutput(df=df),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "pandas-output",
                "table": {
                  "schema": {
                    "fields": [
                      {
                        "name": "index",
                        "type": "integer"
                      },
                      {
                        "name": "Country",
                        "type": "string"
                      },
                      {
                        "name": "Population",
                        "type": "string"
                      }
                    ],
                    "primaryKey": [
                      "index"
                    ]
                  },
                  "data": [
                    {
                      "index": 0,
                      "Country": "USA",
                      "Population": "32,700,000"
                    },
                    {
                      "index": 1,
                      "Country": "China",
                      "Population": "1,300,000,000"
                    },
                    {
                      "index": 2,
                      "Country": "Japan",
                      "Population": "126,000,000"
                    }
                  ]
                },
                "fullWidth": false,
                "displayIndex": true,
                "label": null,
                "actions": null,
                "filterable": true,
                "pageSize": 10,
                "paginationAlwaysVisible": true
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "PandasRowSelectionInput": {
      "object_type": "class",
      "description": "Pandas DataFrame row selection input widget for selecting rows from tabular data.",
      "init": {
        "params": [
          {
            "name": "df",
            "type": "pd.DataFrame",
            "description": "The pandas DataFrame to display.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether row selection is required before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the table should take up the full width of its container.",
            "default": "True",
            "required": false
          },
          {
            "name": "display_index",
            "type": "bool",
            "description": "Whether to display row indices.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the table.",
            "default": "''",
            "required": false
          },
          {
            "name": "filterable",
            "type": "bool",
            "description": "Whether the table is filterable.",
            "default": "False",
            "required": false
          },
          {
            "name": "multiple",
            "type": "bool",
            "description": "Whether multiple rows can be selected.",
            "default": "False",
            "required": false
          },
          {
            "name": "min",
            "type": "Optional[int]",
            "description": "Minimum number of rows that must be selected when multiple=True.",
            "default": "None",
            "required": false
          },
          {
            "name": "max",
            "type": "Optional[int]",
            "description": "Maximum number of rows that can be selected when multiple=True.",
            "default": "None",
            "required": false
          },
          {
            "name": "page_size",
            "type": "int",
            "description": "Number of rows to display per page.",
            "default": "10",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          },
          {
            "name": "pagination_always_visible",
            "type": "bool",
            "description": "Whether pagination controls are always visible.",
            "default": "True",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "Union[List[Dict], Dict, None]",
          "description": "The selected row(s) from the DataFrame. If `multiple` is True, this can be a list of rows as dicts; otherwise, it is a single dict or None."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "import pandas as pd\n\nfrom abstra.forms import PandasRowSelectionInput, run\n\ndata = [\n    {\"Country\": \"USA\", \"Population\": \"32,700,000\"},\n    {\"Country\": \"China\", \"Population\": \"1,300,000,000\"},\n    {\"Country\": \"Japan\", \"Population\": \"126,000,000\"},\n]\ndf = pd.DataFrame(data)\n\n# Create a page with the widget\nexample_page = [\n    PandasRowSelectionInput(df=df, key=\"my-selection\", label=\"Select country\")\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "pandas-row-selection-input",
                "key": "my-selection",
                "hint": null,
                "table": {
                  "schema": {
                    "fields": [
                      {
                        "name": "index",
                        "type": "integer"
                      },
                      {
                        "name": "Country",
                        "type": "string"
                      },
                      {
                        "name": "Population",
                        "type": "string"
                      }
                    ],
                    "primaryKey": [
                      "index"
                    ]
                  },
                  "data": [
                    {
                      "index": 0,
                      "Country": "USA",
                      "Population": "32,700,000"
                    },
                    {
                      "index": 1,
                      "Country": "China",
                      "Population": "1,300,000,000"
                    },
                    {
                      "index": 2,
                      "Country": "Japan",
                      "Population": "126,000,000"
                    }
                  ]
                },
                "required": true,
                "fullWidth": true,
                "displayIndex": false,
                "disabled": false,
                "label": "Select country",
                "multiple": false,
                "filterable": false,
                "value": [],
                "errors": [],
                "min": null,
                "max": null,
                "pageSize": 10,
                "paginationAlwaysVisible": true
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "PasswordInput": {
      "object_type": "class",
      "description": "Password input widget for capturing sensitive text with masked display.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the input.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether the input must be filled before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the input should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "lowercase_required",
            "type": "bool",
            "description": "Whether the input must contain at least one lowercase letter.",
            "default": "False",
            "required": false
          },
          {
            "name": "uppercase_required",
            "type": "bool",
            "description": "Whether the input must contain at least one uppercase letter.",
            "default": "False",
            "required": false
          },
          {
            "name": "special_required",
            "type": "bool",
            "description": "Whether the input must contain at least one special character.",
            "default": "False",
            "required": false
          },
          {
            "name": "digit_required",
            "type": "bool",
            "description": "Whether the input must contain at least one digit.",
            "default": "False",
            "required": false
          },
          {
            "name": "min_length",
            "type": "Optional[int]",
            "description": "Minimum number of characters required.",
            "default": "None",
            "required": false
          },
          {
            "name": "max_length",
            "type": "Optional[int]",
            "description": "Maximum number of characters allowed.",
            "default": "None",
            "required": false
          },
          {
            "name": "size",
            "type": "Optional[int]",
            "description": "Size of the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "pattern",
            "type": "Optional[str]",
            "description": "Regular expression pattern for input validation.",
            "default": "None",
            "required": false
          },
          {
            "name": "autocomplete",
            "type": "Optional[str]",
            "description": "Autocomplete attribute for the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "placeholder",
            "type": "Optional[str]",
            "description": "Placeholder text displayed when the input is empty.",
            "default": "None",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "secret",
            "type": "bool",
            "description": "Whether the input is a secret (e.g., for passwords).",
            "default": "False",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "str",
          "description": "The password value entered by the user."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import PasswordInput, run\n\n# Create a page with the widget\nexample_page = [\n    PasswordInput(label=\"Password Input\", key=\"my-password_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "value": "",
                "type": "password-input",
                "key": "my-password_input",
                "label": "Password Input",
                "hint": null,
                "required": true,
                "fullWidth": false,
                "lowercaseRequired": false,
                "uppercaseRequired": false,
                "specialRequired": false,
                "digitRequired": false,
                "minLength": null,
                "maxLength": null,
                "size": null,
                "pattern": null,
                "autocomplete": null,
                "placeholder": null,
                "disabled": false,
                "secret": false,
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "PhoneInput": {
      "object_type": "class",
      "description": "Phone number input widget with country code selection.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the input.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "placeholder",
            "type": "Optional[str]",
            "description": "Placeholder text displayed when the input is empty.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether the input must be filled before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the input should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[str]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          },
          {
            "name": "invalid_message",
            "type": "Optional[str]",
            "description": "Custom error message for invalid phone numbers.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "PhoneResponse",
          "description": "The phone number entered by the user. PhoneResponse is a dataclass containing: raw(str) the complete digit-only phone number; masked(str): the formatted complete phone number; country_code(str) and national_number(str)."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import PhoneInput, run\n\n# Create a page with the widget\nexample_page = [\n    PhoneInput(label=\"Phone Input\", key=\"my-phone_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "phone-input",
                "key": "my-phone_input",
                "label": "Phone Input",
                "value": {
                  "countryCode": "",
                  "nationalNumber": ""
                },
                "placeholder": null,
                "required": true,
                "hint": null,
                "fullWidth": false,
                "disabled": false,
                "errors": [],
                "invalidMessage": null
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "PlotlyOutput": {
      "object_type": "class",
      "description": "Plotly figure output widget for displaying interactive charts.",
      "init": {
        "params": [
          {
            "name": "fig",
            "type": "Any",
            "description": "The Plotly figure to display.",
            "default": "None",
            "required": false
          },
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the chart.",
            "default": "''",
            "required": false
          },
          {
            "name": "key",
            "type": "str",
            "description": "Identifier for the widget.",
            "default": "''",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the chart should take up the full width of its container.",
            "default": "False",
            "required": false
          }
        ]
      },
      "properties": {},
      "parent_classes": [
        "OutputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "import plotly.graph_objects as go\n\nfrom abstra.forms import PlotlyOutput, run\n\nfigure = go.Figure(\n    data=[go.Bar(x=[1, 2, 3], y=[1, 3, 2])],\n    layout=go.Layout(title=go.layout.Title(text=\"Bar chart example\")),\n)\n\n# Create a page with the widget\nexample_page = [\n    PlotlyOutput(\n        fig=figure,\n        label=\"Bar chart example\",\n        key=\"my-plotly-output\",\n        full_width=True,\n    )\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "plotly-output",
                "figure": {
                  "data": [
                    {
                      "x": [
                        1,
                        2,
                        3
                      ],
                      "y": [
                        1,
                        3,
                        2
                      ],
                      "type": "bar"
                    }
                  ],
                  "layout": {
                    "template": {
                      "data": {
                        "barpolar": [
                          {
                            "marker": {
                              "line": {
                                "color": "#E5ECF6",
                                "width": 0.5
                              },
                              "pattern": {
                                "fillmode": "overlay",
                                "size": 10,
                                "solidity": 0.2
                              }
                            },
                            "type": "barpolar"
                          }
                        ],
                        "bar": [
                          {
                            "error_x": {
                              "color": "#2a3f5f"
                            },
                            "error_y": {
                              "color": "#2a3f5f"
                            },
                            "marker": {
                              "line": {
                                "color": "#E5ECF6",
                                "width": 0.5
                              },
                              "pattern": {
                                "fillmode": "overlay",
                                "size": 10,
                                "solidity": 0.2
                              }
                            },
                            "type": "bar"
                          }
                        ],
                        "carpet": [
                          {
                            "aaxis": {
                              "endlinecolor": "#2a3f5f",
                              "gridcolor": "white",
                              "linecolor": "white",
                              "minorgridcolor": "white",
                              "startlinecolor": "#2a3f5f"
                            },
                            "baxis": {
                              "endlinecolor": "#2a3f5f",
                              "gridcolor": "white",
                              "linecolor": "white",
                              "minorgridcolor": "white",
                              "startlinecolor": "#2a3f5f"
                            },
                            "type": "carpet"
                          }
                        ],
                        "choropleth": [
                          {
                            "colorbar": {
                              "outlinewidth": 0,
                              "ticks": ""
                            },
                            "type": "choropleth"
                          }
                        ],
                        "contourcarpet": [
                          {
                            "colorbar": {
                              "outlinewidth": 0,
                              "ticks": ""
                            },
                            "type": "contourcarpet"
                          }
                        ],
                        "contour": [
                          {
                            "colorbar": {
                              "outlinewidth": 0,
                              "ticks": ""
                            },
                            "colorscale": [
                              [
                                0.0,
                                "#0d0887"
                              ],
                              [
                                0.1111111111111111,
                                "#46039f"
                              ],
                              [
                                0.2222222222222222,
                                "#7201a8"
                              ],
                              [
                                0.3333333333333333,
                                "#9c179e"
                              ],
                              [
                                0.4444444444444444,
                                "#bd3786"
                              ],
                              [
                                0.5555555555555556,
                                "#d8576b"
                              ],
                              [
                                0.6666666666666666,
                                "#ed7953"
                              ],
                              [
                                0.7777777777777778,
                                "#fb9f3a"
                              ],
                              [
                                0.8888888888888888,
                                "#fdca26"
                              ],
                              [
                                1.0,
                                "#f0f921"
                              ]
                            ],
                            "type": "contour"
                          }
                        ],
                        "heatmapgl": [
                          {
                            "colorbar": {
                              "outlinewidth": 0,
                              "ticks": ""
                            },
                            "colorscale": [
                              [
                                0.0,
                                "#0d0887"
                              ],
                              [
                                0.1111111111111111,
                                "#46039f"
                              ],
                              [
                                0.2222222222222222,
                                "#7201a8"
                              ],
                              [
                                0.3333333333333333,
                                "#9c179e"
                              ],
                              [
                                0.4444444444444444,
                                "#bd3786"
                              ],
                              [
                                0.5555555555555556,
                                "#d8576b"
                              ],
                              [
                                0.6666666666666666,
                                "#ed7953"
                              ],
                              [
                                0.7777777777777778,
                                "#fb9f3a"
                              ],
                              [
                                0.8888888888888888,
                                "#fdca26"
                              ],
                              [
                                1.0,
                                "#f0f921"
                              ]
                            ],
                            "type": "heatmapgl"
                          }
                        ],
                        "heatmap": [
                          {
                            "colorbar": {
                              "outlinewidth": 0,
                              "ticks": ""
                            },
                            "colorscale": [
                              [
                                0.0,
                                "#0d0887"
                              ],
                              [
                                0.1111111111111111,
                                "#46039f"
                              ],
                              [
                                0.2222222222222222,
                                "#7201a8"
                              ],
                              [
                                0.3333333333333333,
                                "#9c179e"
                              ],
                              [
                                0.4444444444444444,
                                "#bd3786"
                              ],
                              [
                                0.5555555555555556,
                                "#d8576b"
                              ],
                              [
                                0.6666666666666666,
                                "#ed7953"
                              ],
                              [
                                0.7777777777777778,
                                "#fb9f3a"
                              ],
                              [
                                0.8888888888888888,
                                "#fdca26"
                              ],
                              [
                                1.0,
                                "#f0f921"
                              ]
                            ],
                            "type": "heatmap"
                          }
                        ],
                        "histogram2dcontour": [
                          {
                            "colorbar": {
                              "outlinewidth": 0,
                              "ticks": ""
                            },
                            "colorscale": [
                              [
                                0.0,
                                "#0d0887"
                              ],
                              [
                                0.1111111111111111,
                                "#46039f"
                              ],
                              [
                                0.2222222222222222,
                                "#7201a8"
                              ],
                              [
                                0.3333333333333333,
                                "#9c179e"
                              ],
                              [
                                0.4444444444444444,
                                "#bd3786"
                              ],
                              [
                                0.5555555555555556,
                                "#d8576b"
                              ],
                              [
                                0.6666666666666666,
                                "#ed7953"
                              ],
                              [
                                0.7777777777777778,
                                "#fb9f3a"
                              ],
                              [
                                0.8888888888888888,
                                "#fdca26"
                              ],
                              [
                                1.0,
                                "#f0f921"
                              ]
                            ],
                            "type": "histogram2dcontour"
                          }
                        ],
                        "histogram2d": [
                          {
                            "colorbar": {
                              "outlinewidth": 0,
                              "ticks": ""
                            },
                            "colorscale": [
                              [
                                0.0,
                                "#0d0887"
                              ],
                              [
                                0.1111111111111111,
                                "#46039f"
                              ],
                              [
                                0.2222222222222222,
                                "#7201a8"
                              ],
                              [
                                0.3333333333333333,
                                "#9c179e"
                              ],
                              [
                                0.4444444444444444,
                                "#bd3786"
                              ],
                              [
                                0.5555555555555556,
                                "#d8576b"
                              ],
                              [
                                0.6666666666666666,
                                "#ed7953"
                              ],
                              [
                                0.7777777777777778,
                                "#fb9f3a"
                              ],
                              [
                                0.8888888888888888,
                                "#fdca26"
                              ],
                              [
                                1.0,
                                "#f0f921"
                              ]
                            ],
                            "type": "histogram2d"
                          }
                        ],
                        "histogram": [
                          {
                            "marker": {
                              "pattern": {
                                "fillmode": "overlay",
                                "size": 10,
                                "solidity": 0.2
                              }
                            },
                            "type": "histogram"
                          }
                        ],
                        "mesh3d": [
                          {
                            "colorbar": {
                              "outlinewidth": 0,
                              "ticks": ""
                            },
                            "type": "mesh3d"
                          }
                        ],
                        "parcoords": [
                          {
                            "line": {
                              "colorbar": {
                                "outlinewidth": 0,
                                "ticks": ""
                              }
                            },
                            "type": "parcoords"
                          }
                        ],
                        "pie": [
                          {
                            "automargin": true,
                            "type": "pie"
                          }
                        ],
                        "scatter3d": [
                          {
                            "line": {
                              "colorbar": {
                                "outlinewidth": 0,
                                "ticks": ""
                              }
                            },
                            "marker": {
                              "colorbar": {
                                "outlinewidth": 0,
                                "ticks": ""
                              }
                            },
                            "type": "scatter3d"
                          }
                        ],
                        "scattercarpet": [
                          {
                            "marker": {
                              "colorbar": {
                                "outlinewidth": 0,
                                "ticks": ""
                              }
                            },
                            "type": "scattercarpet"
                          }
                        ],
                        "scattergeo": [
                          {
                            "marker": {
                              "colorbar": {
                                "outlinewidth": 0,
                                "ticks": ""
                              }
                            },
                            "type": "scattergeo"
                          }
                        ],
                        "scattergl": [
                          {
                            "marker": {
                              "colorbar": {
                                "outlinewidth": 0,
                                "ticks": ""
                              }
                            },
                            "type": "scattergl"
                          }
                        ],
                        "scattermapbox": [
                          {
                            "marker": {
                              "colorbar": {
                                "outlinewidth": 0,
                                "ticks": ""
                              }
                            },
                            "type": "scattermapbox"
                          }
                        ],
                        "scatterpolargl": [
                          {
                            "marker": {
                              "colorbar": {
                                "outlinewidth": 0,
                                "ticks": ""
                              }
                            },
                            "type": "scatterpolargl"
                          }
                        ],
                        "scatterpolar": [
                          {
                            "marker": {
                              "colorbar": {
                                "outlinewidth": 0,
                                "ticks": ""
                              }
                            },
                            "type": "scatterpolar"
                          }
                        ],
                        "scatter": [
                          {
                            "fillpattern": {
                              "fillmode": "overlay",
                              "size": 10,
                              "solidity": 0.2
                            },
                            "type": "scatter"
                          }
                        ],
                        "scatterternary": [
                          {
                            "marker": {
                              "colorbar": {
                                "outlinewidth": 0,
                                "ticks": ""
                              }
                            },
                            "type": "scatterternary"
                          }
                        ],
                        "surface": [
                          {
                            "colorbar": {
                              "outlinewidth": 0,
                              "ticks": ""
                            },
                            "colorscale": [
                              [
                                0.0,
                                "#0d0887"
                              ],
                              [
                                0.1111111111111111,
                                "#46039f"
                              ],
                              [
                                0.2222222222222222,
                                "#7201a8"
                              ],
                              [
                                0.3333333333333333,
                                "#9c179e"
                              ],
                              [
                                0.4444444444444444,
                                "#bd3786"
                              ],
                              [
                                0.5555555555555556,
                                "#d8576b"
                              ],
                              [
                                0.6666666666666666,
                                "#ed7953"
                              ],
                              [
                                0.7777777777777778,
                                "#fb9f3a"
                              ],
                              [
                                0.8888888888888888,
                                "#fdca26"
                              ],
                              [
                                1.0,
                                "#f0f921"
                              ]
                            ],
                            "type": "surface"
                          }
                        ],
                        "table": [
                          {
                            "cells": {
                              "fill": {
                                "color": "#EBF0F8"
                              },
                              "line": {
                                "color": "white"
                              }
                            },
                            "header": {
                              "fill": {
                                "color": "#C8D4E3"
                              },
                              "line": {
                                "color": "white"
                              }
                            },
                            "type": "table"
                          }
                        ]
                      },
                      "layout": {
                        "annotationdefaults": {
                          "arrowcolor": "#2a3f5f",
                          "arrowhead": 0,
                          "arrowwidth": 1
                        },
                        "autotypenumbers": "strict",
                        "coloraxis": {
                          "colorbar": {
                            "outlinewidth": 0,
                            "ticks": ""
                          }
                        },
                        "colorscale": {
                          "diverging": [
                            [
                              0,
                              "#8e0152"
                            ],
                            [
                              0.1,
                              "#c51b7d"
                            ],
                            [
                              0.2,
                              "#de77ae"
                            ],
                            [
                              0.3,
                              "#f1b6da"
                            ],
                            [
                              0.4,
                              "#fde0ef"
                            ],
                            [
                              0.5,
                              "#f7f7f7"
                            ],
                            [
                              0.6,
                              "#e6f5d0"
                            ],
                            [
                              0.7,
                              "#b8e186"
                            ],
                            [
                              0.8,
                              "#7fbc41"
                            ],
                            [
                              0.9,
                              "#4d9221"
                            ],
                            [
                              1,
                              "#276419"
                            ]
                          ],
                          "sequential": [
                            [
                              0.0,
                              "#0d0887"
                            ],
                            [
                              0.1111111111111111,
                              "#46039f"
                            ],
                            [
                              0.2222222222222222,
                              "#7201a8"
                            ],
                            [
                              0.3333333333333333,
                              "#9c179e"
                            ],
                            [
                              0.4444444444444444,
                              "#bd3786"
                            ],
                            [
                              0.5555555555555556,
                              "#d8576b"
                            ],
                            [
                              0.6666666666666666,
                              "#ed7953"
                            ],
                            [
                              0.7777777777777778,
                              "#fb9f3a"
                            ],
                            [
                              0.8888888888888888,
                              "#fdca26"
                            ],
                            [
                              1.0,
                              "#f0f921"
                            ]
                          ],
                          "sequentialminus": [
                            [
                              0.0,
                              "#0d0887"
                            ],
                            [
                              0.1111111111111111,
                              "#46039f"
                            ],
                            [
                              0.2222222222222222,
                              "#7201a8"
                            ],
                            [
                              0.3333333333333333,
                              "#9c179e"
                            ],
                            [
                              0.4444444444444444,
                              "#bd3786"
                            ],
                            [
                              0.5555555555555556,
                              "#d8576b"
                            ],
                            [
                              0.6666666666666666,
                              "#ed7953"
                            ],
                            [
                              0.7777777777777778,
                              "#fb9f3a"
                            ],
                            [
                              0.8888888888888888,
                              "#fdca26"
                            ],
                            [
                              1.0,
                              "#f0f921"
                            ]
                          ]
                        },
                        "colorway": [
                          "#636efa",
                          "#EF553B",
                          "#00cc96",
                          "#ab63fa",
                          "#FFA15A",
                          "#19d3f3",
                          "#FF6692",
                          "#B6E880",
                          "#FF97FF",
                          "#FECB52"
                        ],
                        "font": {
                          "color": "#2a3f5f"
                        },
                        "geo": {
                          "bgcolor": "white",
                          "lakecolor": "white",
                          "landcolor": "#E5ECF6",
                          "showlakes": true,
                          "showland": true,
                          "subunitcolor": "white"
                        },
                        "hoverlabel": {
                          "align": "left"
                        },
                        "hovermode": "closest",
                        "mapbox": {
                          "style": "light"
                        },
                        "paper_bgcolor": "white",
                        "plot_bgcolor": "#E5ECF6",
                        "polar": {
                          "angularaxis": {
                            "gridcolor": "white",
                            "linecolor": "white",
                            "ticks": ""
                          },
                          "bgcolor": "#E5ECF6",
                          "radialaxis": {
                            "gridcolor": "white",
                            "linecolor": "white",
                            "ticks": ""
                          }
                        },
                        "scene": {
                          "xaxis": {
                            "backgroundcolor": "#E5ECF6",
                            "gridcolor": "white",
                            "gridwidth": 2,
                            "linecolor": "white",
                            "showbackground": true,
                            "ticks": "",
                            "zerolinecolor": "white"
                          },
                          "yaxis": {
                            "backgroundcolor": "#E5ECF6",
                            "gridcolor": "white",
                            "gridwidth": 2,
                            "linecolor": "white",
                            "showbackground": true,
                            "ticks": "",
                            "zerolinecolor": "white"
                          },
                          "zaxis": {
                            "backgroundcolor": "#E5ECF6",
                            "gridcolor": "white",
                            "gridwidth": 2,
                            "linecolor": "white",
                            "showbackground": true,
                            "ticks": "",
                            "zerolinecolor": "white"
                          }
                        },
                        "shapedefaults": {
                          "line": {
                            "color": "#2a3f5f"
                          }
                        },
                        "ternary": {
                          "aaxis": {
                            "gridcolor": "white",
                            "linecolor": "white",
                            "ticks": ""
                          },
                          "baxis": {
                            "gridcolor": "white",
                            "linecolor": "white",
                            "ticks": ""
                          },
                          "bgcolor": "#E5ECF6",
                          "caxis": {
                            "gridcolor": "white",
                            "linecolor": "white",
                            "ticks": ""
                          }
                        },
                        "title": {
                          "x": 0.05
                        },
                        "xaxis": {
                          "automargin": true,
                          "gridcolor": "white",
                          "linecolor": "white",
                          "ticks": "",
                          "title": {
                            "standoff": 15
                          },
                          "zerolinecolor": "white",
                          "zerolinewidth": 2
                        },
                        "yaxis": {
                          "automargin": true,
                          "gridcolor": "white",
                          "linecolor": "white",
                          "ticks": "",
                          "title": {
                            "standoff": 15
                          },
                          "zerolinecolor": "white",
                          "zerolinewidth": 2
                        }
                      }
                    },
                    "title": {
                      "text": "Bar chart example"
                    }
                  }
                },
                "fullWidth": true,
                "label": "Bar chart example"
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "ProgressOutput": {
      "object_type": "class",
      "description": "Progress bar output widget for displaying completion status.",
      "init": {
        "params": [
          {
            "name": "current",
            "type": "float",
            "description": "The current progress value.",
            "default": "50",
            "required": false
          },
          {
            "name": "total",
            "type": "float",
            "description": "The total value representing 100% progress.",
            "default": "100",
            "required": false
          },
          {
            "name": "text",
            "type": "str",
            "description": "Text displayed alongside the progress bar.",
            "default": "''",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the progress bar should take up the full width of its container.",
            "default": "False",
            "required": false
          }
        ]
      },
      "properties": {},
      "parent_classes": [
        "OutputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from time import sleep\n\nfrom abstra.forms import ProgressOutput, run\n\n\ndef show_progress_bar(state):\n    for i in range(1, 11):\n        sleep(1)  # Simulating a time-consuming process\n        yield [ProgressOutput(current=i, total=10)]\n\n\nrun([show_progress_bar])",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "progress-output",
                "current": 1,
                "total": 10,
                "text": "",
                "fullWidth": false
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 0,
              "disabled": false
            },
            "endPage": false,
            "seq": 0,
            "actions": []
          }
        }
      ]
    },
    "RatingInput": {
      "object_type": "class",
      "description": "Rating input widget for capturing user ratings on a scale.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the input.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether a rating must be selected before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the input should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          },
          {
            "name": "max_value",
            "type": "int",
            "description": "Maximum value for the rating scale.",
            "default": "5",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "int",
          "description": "The rating value selected by the user."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import RatingInput, run\n\n# Create a page with the widget\nexample_page = [\n    RatingInput(label=\"Rating Input\", key=\"my-rating_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "rating-input",
                "key": "my-rating_input",
                "label": "Rating Input",
                "value": 0,
                "required": true,
                "hint": null,
                "fullWidth": false,
                "max": 5,
                "char": "⭐️",
                "disabled": false,
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "RichTextInput": {
      "object_type": "class",
      "description": "Rich text input widget with formatting options.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the input.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "placeholder",
            "type": "str",
            "description": "Placeholder text displayed when the input is empty.",
            "default": "''",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether the input must be filled before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the input should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "str",
          "description": "The formatted text value entered by the user."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import RichTextInput, run\n\n# Create a page with the widget\nexample_page = [\n    RichTextInput(label=\"Rich Text Input\", key=\"my-rich_text_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "rich-text-input",
                "key": "my-rich_text_input",
                "label": "Rich Text Input",
                "value": "",
                "placeholder": "",
                "required": true,
                "hint": null,
                "fullWidth": false,
                "disabled": false,
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "TagInput": {
      "object_type": "class",
      "description": "Tag input widget for entering multiple tag values.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the input.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "placeholder",
            "type": "str",
            "description": "Placeholder text displayed when the input is empty.",
            "default": "''",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether at least one tag must be entered before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the input should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "List[str]",
          "description": "The list of tag values entered by the user."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import TagInput, run\n\n# Create a page with the widget\nexample_page = [\n    TagInput(label=\"Tag Input\", key=\"my-tag_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "tag-input",
                "key": "my-tag_input",
                "label": "Tag Input",
                "value": [],
                "placeholder": "",
                "required": true,
                "hint": null,
                "fullWidth": false,
                "disabled": false,
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "TextInput": {
      "object_type": "class",
      "description": "Text input widget for collecting single-line text.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the input.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "placeholder",
            "type": "str",
            "description": "Placeholder text displayed when the input is empty.",
            "default": "''",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether the input must be filled before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the input should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          },
          {
            "name": "mask",
            "type": "Optional[str]",
            "description": "String pattern for input masking.",
            "default": "None",
            "required": false
          },
          {
            "name": "max_length",
            "type": "Optional[int]",
            "description": "Maximum number of characters allowed.",
            "default": "None",
            "required": false
          },
          {
            "name": "min_length",
            "type": "Optional[int]",
            "description": "Minimum number of characters required.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "str",
          "description": "The text value entered by the user."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import TextInput, run\n\n# Create a page with the widget\nexample_page = [\n    TextInput(label=\"Text Input\", key=\"my-text_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "text-input",
                "key": "my-text_input",
                "label": "Text Input",
                "value": "",
                "placeholder": "",
                "required": true,
                "hint": null,
                "fullWidth": false,
                "mask": null,
                "maxLength": null,
                "minLength": null,
                "disabled": false,
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "TextOutput": {
      "object_type": "class",
      "description": "Text output widget for displaying plain text.",
      "init": {
        "params": [
          {
            "name": "text",
            "type": "str",
            "description": "The text to display.",
            "default": "None",
            "required": true
          },
          {
            "name": "size",
            "type": "Literal[\"small\", \"medium\", \"large\"]",
            "description": "The size of the text.",
            "default": "'medium'",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the widget should take up the full width of its container.",
            "default": "False",
            "required": false
          }
        ]
      },
      "properties": {},
      "parent_classes": [
        "OutputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import TextOutput, run\n\n# Create a page with the widget\nexample_page = [\n    TextOutput(text=\"Hello World!\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "text-output",
                "text": "Hello World!",
                "size": "medium",
                "fullWidth": false
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "TextareaInput": {
      "object_type": "class",
      "description": "Textarea input widget for collecting multi-line text.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the textarea.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "placeholder",
            "type": "str",
            "description": "Placeholder text displayed when the textarea is empty.",
            "default": "''",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether the textarea must be filled before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the textarea.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the textarea should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the textarea is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "str",
          "description": "The multi-line text value entered by the user."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import TextareaInput, run\n\n# Create a page with the widget\nexample_page = [\n    TextareaInput(label=\"Textarea Input\", key=\"my-textarea_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "textarea-input",
                "key": "my-textarea_input",
                "label": "Textarea Input",
                "value": "",
                "placeholder": "",
                "required": true,
                "hint": null,
                "fullWidth": false,
                "disabled": false,
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "TimeInput": {
      "object_type": "class",
      "description": "Time input widget with time picker.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the input.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether a time must be selected before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the input should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "format",
            "type": "str",
            "description": "The format of the time input.",
            "default": "'24hs'",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "Optional[datetime.time]",
          "description": "The time value selected by the user."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import TimeInput, run\n\n# Create a page with the widget\nexample_page = [\n    TimeInput(label=\"Time Input\", key=\"my-time_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "time-input",
                "key": "my-time_input",
                "label": "Time Input",
                "format": "24hs",
                "hint": null,
                "value": null,
                "required": true,
                "fullWidth": false,
                "disabled": false,
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "ToggleInput": {
      "object_type": "class",
      "description": "Toggle switch input widget for capturing boolean values.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed next to the toggle.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "on_text",
            "type": "str",
            "description": "Text to display when the toggle is on.",
            "default": "'Yes'",
            "required": false
          },
          {
            "name": "off_text",
            "type": "str",
            "description": "Text to display when the toggle is off.",
            "default": "'No'",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether the toggle must be switched on before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the toggle.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the widget should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the toggle is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "bool",
          "description": "The boolean value indicating whether the toggle is on or off."
        }
      },
      "parent_classes": [
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import ToggleInput, run\n\n# Create a page with the widget\nexample_page = [\n    ToggleInput(label=\"Toggle Input\", key=\"my-toggle_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "toggle-input",
                "key": "my-toggle_input",
                "label": "Toggle Input",
                "onText": "Yes",
                "offText": "No",
                "value": false,
                "required": true,
                "hint": null,
                "fullWidth": false,
                "disabled": false,
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "VideoInput": {
      "object_type": "class",
      "description": "Video upload input widget for handling video file uploads.",
      "init": {
        "params": [
          {
            "name": "label",
            "type": "str",
            "description": "Text label displayed above the input.",
            "default": "None",
            "required": true
          },
          {
            "name": "key",
            "type": "Optional[str]",
            "description": "Identifier for the widget, defaults to label if not provided.",
            "default": "None",
            "required": false
          },
          {
            "name": "required",
            "type": "bool",
            "description": "Whether a file must be uploaded before proceeding.",
            "default": "True",
            "required": false
          },
          {
            "name": "hint",
            "type": "Optional[str]",
            "description": "Help text displayed below the input.",
            "default": "None",
            "required": false
          },
          {
            "name": "full_width",
            "type": "bool",
            "description": "Whether the input should take up the full width of its container.",
            "default": "False",
            "required": false
          },
          {
            "name": "disabled",
            "type": "bool",
            "description": "Whether the input is non-interactive.",
            "default": "False",
            "required": false
          },
          {
            "name": "max_file_size",
            "type": "Optional[int]",
            "description": "Maximum file size in bytes.",
            "default": "None",
            "required": false
          },
          {
            "name": "multiple",
            "type": "bool",
            "description": "Whether multiple files can be uploaded.",
            "default": "False",
            "required": false
          },
          {
            "name": "min",
            "type": "Optional[int]",
            "description": "Minimum number of files required when multiple=True.",
            "default": "None",
            "required": false
          },
          {
            "name": "max",
            "type": "Optional[int]",
            "description": "Maximum number of files allowed when multiple=True.",
            "default": "None",
            "required": false
          },
          {
            "name": "accepted_formats",
            "type": "Optional[List[str]]",
            "description": "List of accepted file extensions.",
            "default": "None",
            "required": false
          },
          {
            "name": "errors",
            "type": "Optional[Union[List[str], str]]",
            "description": "Pre-defined validation error messages to display.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "value": {
          "name": "value",
          "type": "Union[FileResponse, List[FileResponse], None]",
          "description": "FileResponse is a dictionary-like object: `{'name': str, 'path': pathlib.Path}`. If `multiple` is True, will be a list, otherwise a single FileResponse object."
        }
      },
      "parent_classes": [
        "FileInput",
        "InputWidget",
        "Widget"
      ],
      "examples": [
        {
          "name": "Basic Usage",
          "description": "This example runs a form with a single page containing the widget",
          "code": "from abstra.forms import VideoInput, run\n\n# Create a page with the widget\nexample_page = [\n    VideoInput(label=\"Video Input\", key=\"my-video_input\"),\n]\n\n# Run the form\nresult = run([example_page])\n\n# Print the result\nprint(result)",
          "output": {
            "type": "form:render",
            "widgets": [
              {
                "type": "video-input",
                "key": "my-video_input",
                "hint": null,
                "label": "Video Input",
                "value": [],
                "required": true,
                "multiple": false,
                "min": null,
                "max": null,
                "acceptedFormats": null,
                "acceptedMimeTypes": "*",
                "fullWidth": false,
                "disabled": false,
                "maxFileSize": null,
                "errors": []
              }
            ],
            "stepsInfo": {
              "current": 1,
              "total": 1,
              "disabled": true
            },
            "endPage": false,
            "seq": 0,
            "actions": [
              {
                "key": "i18n_next_action",
                "label": "i18n_next_action"
              }
            ]
          }
        }
      ]
    },
    "run": {
      "object_type": "function",
      "description": "Run a form with the given runnables or a single widget. This is the main entry point for executing forms. It supports two modes: 1. Running a list of runnables as a multi-step form 2. Running a single widget to get its value",
      "params": [
        {
          "name": "runnables",
          "type": "Union[List[Runnable], Widget]",
          "description": "Either a list of form steps or a single widget.",
          "default": "None",
          "required": true
        },
        {
          "name": "state",
          "type": "Optional[Dict]",
          "description": "Initial state values for the form.",
          "default": "None",
          "required": false
        },
        {
          "name": "hide_steps",
          "type": "bool",
          "description": "Whether to hide steps navigation in the UI. Union[State, None, object]: - For a list of runnables: the final State object - For a single InputWidget: the widget's value - For other single widgets: None",
          "default": "False",
          "required": false
        }
      ],
      "return_type": "Union[abstra_internals.entities.forms.form_state.State, NoneType, object]",
      "examples": []
    },
    "end_page_step": {
      "object_type": "function",
      "description": "Add this decorator to a function to mark it as the end page of a form. It will remove buttons and end execution.",
      "params": [
        {
          "name": "func",
          "type": "TemplateFunction",
          "description": "The function to be decorated. EndPageStep: A step object that represents the end page of a form.",
          "default": "None",
          "required": true
        }
      ],
      "return_type": "abstra_internals.entities.forms.steps.EndPageStep",
      "examples": []
    },
    "read_appointment": null,
    "read_camera": null,
    "read_cards": null,
    "read_checkbox": null,
    "read_checklist": null,
    "read_cnpj": null,
    "read_code": null,
    "read_cpf": null,
    "read_currency": null,
    "read_custom": null,
    "read_date": null,
    "read_dropdown": null,
    "read_email": null,
    "read_file": null,
    "read_image": null,
    "read_list": null,
    "read_multiple_choice": null,
    "read_nps": null,
    "read_number": null,
    "read_number_slider": null,
    "read_pandas_row_selection": null,
    "read_password": null,
    "read_phone": null,
    "read_rating": null,
    "read_richtext": null,
    "read_tag": null,
    "read": null,
    "read_textarea": null,
    "read_time": null,
    "read_toggle": null,
    "read_video": null,
    "display_file": null,
    "display_html": null,
    "display_iframe": null,
    "display_image": null,
    "display_latex": null,
    "display_link": null,
    "display_markdown": null,
    "display_pandas": null,
    "display_plotly": null,
    "display_progress": null,
    "display": null,
    "Page": null,
    "reactive": null,
    "run_steps": null
  },
  "abstra.hooks": {
    "get_raw_request": {
      "object_type": "function",
      "description": "Get the raw HTTP request data. Returns: Tuple[str, Dict[str, str], Dict[str, str]]: A tuple containing: - Raw request body as a string - Request headers as a dictionary - Request query parameters as a dictionary",
      "params": [],
      "return_type": "Tuple[str, Dict[str, str], Dict[str, str]]",
      "examples": []
    },
    "get_request": {
      "object_type": "function",
      "description": "Get the HTTP request data with parsed body. Returns: Tuple[Union[str, List, Dict], Dict[str, str], Dict[str, str]]: A tuple containing: - Parsed request body (as string, list, or dict depending on content type) - Request headers as a dictionary - Request query parameters as a dictionary",
      "params": [],
      "return_type": "Tuple[Union[str, List, Dict], Dict[str, str], Dict[str, str]]",
      "examples": []
    },
    "send_response": {
      "object_type": "function",
      "description": "Send an HTTP response.",
      "params": [
        {
          "name": "body",
          "type": "Union[str, Dict, List]",
          "description": "Response body content. Non-string values will be serialized to JSON. Defaults to empty string.",
          "default": "''",
          "required": false
        },
        {
          "name": "status_code",
          "type": "int",
          "description": "HTTP status code. Defaults to 200.",
          "default": "200",
          "required": false
        },
        {
          "name": "headers",
          "type": "Dict[str, str]",
          "description": "HTTP response headers. Defaults to empty dict. BadSendResponse: If status_code is not an integer or headers is not a dictionary.",
          "default": "{}",
          "required": false
        }
      ],
      "return_type": "None",
      "examples": []
    },
    "send_json": {
      "object_type": "function",
      "description": "Send a JSON HTTP response. Automatically sets the Content-Type header to application/json if not already set.",
      "params": [
        {
          "name": "data",
          "type": "Union[Dict, List]",
          "description": "Data to be serialized to JSON. Defaults to empty dict.",
          "default": "{}",
          "required": false
        },
        {
          "name": "status_code",
          "type": "int",
          "description": "HTTP status code. Defaults to 200.",
          "default": "200",
          "required": false
        },
        {
          "name": "headers",
          "type": "Dict[str, str]",
          "description": "HTTP response headers. Defaults to empty dict. BadSendResponse: If status_code is not an integer or headers is not a dictionary.",
          "default": "{}",
          "required": false
        }
      ],
      "return_type": "None",
      "examples": []
    },
    "get_email_request": {
      "object_type": "function",
      "description": "Get the raw email request data. Returns: dict: Email request data containing sender, recipients, subject, and body information.",
      "params": [],
      "return_type": "Unknown",
      "examples": []
    }
  },
  "abstra.logging": {
    "logger": null
  },
  "abstra.messages": {
    "send_email": {
      "object_type": "function",
      "description": "Send an email to one or more recipients.",
      "params": [
        {
          "name": "to",
          "type": "Union[str, List[str]]",
          "description": "Email address(es) of the recipient(s). Can be a single email address as a string or multiple addresses as a list of strings.",
          "default": "None",
          "required": true
        },
        {
          "name": "message",
          "type": "str",
          "description": "Content of the email message.",
          "default": "None",
          "required": true
        },
        {
          "name": "title",
          "type": "str",
          "description": "Subject line of the email. Defaults to \"\".",
          "default": "''",
          "required": false
        },
        {
          "name": "attachments",
          "type": "List[Union[str, io.IOBase]]",
          "description": "List of attachments to include. Each attachment can be a file path string or an open file-like object. Defaults to [].",
          "default": "[]",
          "required": false
        },
        {
          "name": "is_html",
          "type": "bool",
          "description": "Whether the message content is HTML. When True, the message will be sent as HTML; when False, the message will be sent as plain text. Defaults to False.",
          "default": "False",
          "required": false
        }
      ],
      "return_type": "Unknown",
      "examples": []
    }
  },
  "abstra.tables": {
    "run": {
      "object_type": "function",
      "description": "Execute a raw SQL query with parameters (deprecated, use run_sql instead).",
      "params": [
        {
          "name": "query",
          "type": "str",
          "description": "SQL query to execute.",
          "default": "None",
          "required": true
        },
        {
          "name": "params",
          "type": "List",
          "description": "List of parameters for the query. Defaults to []. List[dict]: List of rows returned by the query.",
          "default": "[]",
          "required": false
        }
      ],
      "return_type": "Unknown",
      "examples": []
    },
    "run_sql": {
      "object_type": "function",
      "description": "Execute a raw SQL query with parameters.",
      "params": [
        {
          "name": "query",
          "type": "str",
          "description": "SQL query to execute.",
          "default": "None",
          "required": true
        },
        {
          "name": "params",
          "type": "List",
          "description": "List of parameters for the query. Defaults to []. List[dict]: List of rows returned by the query.",
          "default": "[]",
          "required": false
        }
      ],
      "return_type": "Unknown",
      "examples": []
    },
    "query_df": {
      "object_type": "function",
      "description": "Execute a raw SQL query and return the results as a pandas DataFrame.",
      "params": [
        {
          "name": "query",
          "type": "str",
          "description": "SQL query to execute.",
          "default": "None",
          "required": true
        },
        {
          "name": "params",
          "type": "List",
          "description": "List of parameters for the query. Defaults to []. pandas.DataFrame: DataFrame containing the query results.",
          "default": "[]",
          "required": false
        }
      ],
      "return_type": "Unknown",
      "examples": []
    },
    "TablesExecutionError": {
      "object_type": "class",
      "description": "Exception raised when there is an error executing a SQL query.",
      "init": {
        "params": [
          {
            "name": "errors",
            "type": "List",
            "description": "List of error messages from the database.",
            "default": "None",
            "required": true
          },
          {
            "name": "query",
            "type": "str",
            "description": "The SQL query that caused the error.",
            "default": "None",
            "required": true
          },
          {
            "name": "params",
            "type": "Optional[List]",
            "description": "The parameters used in the query.",
            "default": "None",
            "required": false
          }
        ]
      },
      "properties": {
        "query": {
          "name": "query",
          "type": "str",
          "description": "The SQL query that caused the error."
        },
        "params": {
          "name": "params",
          "type": "Optional[List]",
          "description": "The parameters used in the query."
        },
        "errors": {
          "name": "errors",
          "type": "List",
          "description": "List of error messages from the database."
        }
      },
      "parent_classes": [
        "BaseException",
        "Exception"
      ],
      "examples": []
    },
    "select": {
      "object_type": "function",
      "description": "Select rows from a table with filtering and ordering options.",
      "params": [
        {
          "name": "table",
          "type": "str",
          "description": "Name of the table to select from.",
          "default": "None",
          "required": true
        },
        {
          "name": "where",
          "type": "Optional[dict]",
          "description": "Dictionary of conditions for the WHERE clause.",
          "default": "None",
          "required": false
        },
        {
          "name": "order_by",
          "type": "Optional[str]",
          "description": "Column name to order by.",
          "default": "None",
          "required": false
        },
        {
          "name": "order_desc",
          "type": "bool",
          "description": "Whether to order in descending order. Defaults to False.",
          "default": "False",
          "required": false
        },
        {
          "name": "limit",
          "type": "Optional[int]",
          "description": "Maximum number of rows to return.",
          "default": "None",
          "required": false
        },
        {
          "name": "offset",
          "type": "Optional[int]",
          "description": "Number of rows to skip. List[dict]: List of rows matching the query.",
          "default": "None",
          "required": false
        }
      ],
      "return_type": "Unknown",
      "examples": []
    },
    "select_by_id": {
      "object_type": "function",
      "description": "Select a single row from a table by its ID.",
      "params": [
        {
          "name": "table",
          "type": "str",
          "description": "Name of the table to select from.",
          "default": "None",
          "required": true
        },
        {
          "name": "id",
          "type": "str",
          "description": "ID of the row to select. Optional[dict]: The matching row, or None if no row matches.",
          "default": "None",
          "required": true
        }
      ],
      "return_type": "Unknown",
      "examples": []
    },
    "select_df": {
      "object_type": "function",
      "description": "Select rows from a table and return a pandas DataFrame.",
      "params": [
        {
          "name": "table",
          "type": "str",
          "description": "Name of the table to select from.",
          "default": "None",
          "required": true
        },
        {
          "name": "where",
          "type": "Optional[dict]",
          "description": "Dictionary of conditions for the WHERE clause.",
          "default": "None",
          "required": false
        },
        {
          "name": "order_by",
          "type": "Optional[str]",
          "description": "Column name to order by.",
          "default": "None",
          "required": false
        },
        {
          "name": "order_desc",
          "type": "bool",
          "description": "Whether to order in descending order. Defaults to False.",
          "default": "False",
          "required": false
        },
        {
          "name": "limit",
          "type": "Optional[int]",
          "description": "Maximum number of rows to return.",
          "default": "None",
          "required": false
        },
        {
          "name": "offset",
          "type": "Optional[int]",
          "description": "Number of rows to skip. pandas.DataFrame: DataFrame containing the rows matching the query.",
          "default": "None",
          "required": false
        }
      ],
      "return_type": "Unknown",
      "examples": []
    },
    "select_one": {
      "object_type": "function",
      "description": "Select a single row from a table.",
      "params": [
        {
          "name": "table",
          "type": "str",
          "description": "Name of the table to select from.",
          "default": "None",
          "required": true
        },
        {
          "name": "where",
          "type": "Optional[dict]",
          "description": "Dictionary of conditions for the WHERE clause. Optional[dict]: The first matching row, or None if no rows match.",
          "default": "None",
          "required": false
        }
      ],
      "return_type": "Unknown",
      "examples": []
    },
    "insert": {
      "object_type": "function",
      "description": "Insert one or more rows into a table.",
      "params": [
        {
          "name": "table",
          "type": "str",
          "description": "Name of the table to insert into.",
          "default": "None",
          "required": true
        },
        {
          "name": "values",
          "type": "Any",
          "description": "Dictionary of column-value pairs for a single row, or list of dictionaries for multiple rows. Union[dict, List[dict]]: The inserted row if values is a dict, or a list of all inserted rows if values is a list.",
          "default": "None",
          "required": true
        }
      ],
      "return_type": "Unknown",
      "examples": []
    },
    "update": {
      "object_type": "function",
      "description": "Update rows in a table.",
      "params": [
        {
          "name": "table",
          "type": "str",
          "description": "Name of the table to update.",
          "default": "None",
          "required": true
        },
        {
          "name": "set",
          "type": "Any",
          "description": "Dictionary (or dataclass) of column-value pairs to set.",
          "default": "None",
          "required": true
        },
        {
          "name": "where",
          "type": "Any",
          "description": "Dictionary (or dataclass) of column-value pairs for the WHERE clause. List[dict]: List of updated rows.",
          "default": "None",
          "required": true
        }
      ],
      "return_type": "Unknown",
      "examples": []
    },
    "delete": {
      "object_type": "function",
      "description": "Delete rows from a table based on conditions.",
      "params": [
        {
          "name": "table",
          "type": "str",
          "description": "Name of the table to delete from.",
          "default": "None",
          "required": true
        },
        {
          "name": "values",
          "type": "Any",
          "description": "Dictionary (or dataclass) of column-value pairs for the WHERE clause. List[dict]: List of deleted rows.",
          "default": "None",
          "required": true
        }
      ],
      "return_type": "Unknown",
      "examples": []
    },
    "update_by_id": {
      "object_type": "function",
      "description": "Update a row in a table by its ID.",
      "params": [
        {
          "name": "table",
          "type": "str",
          "description": "Name of the table to update.",
          "default": "None",
          "required": true
        },
        {
          "name": "id",
          "type": "str",
          "description": "ID of the row to update.",
          "default": "None",
          "required": true
        },
        {
          "name": "values",
          "type": "Any",
          "description": "Dictionary (or dataclass) of column-value pairs to set. Optional[dict]: The updated row, or None if no row matches.",
          "default": "None",
          "required": true
        }
      ],
      "return_type": "Unknown",
      "examples": []
    },
    "delete_by_id": {
      "object_type": "function",
      "description": "Delete a row from a table by its ID.",
      "params": [
        {
          "name": "table",
          "type": "str",
          "description": "Name of the table to delete from.",
          "default": "None",
          "required": true
        },
        {
          "name": "id",
          "type": "str",
          "description": "ID of the row to delete. Optional[dict]: The deleted row, or None if no row matches.",
          "default": "None",
          "required": true
        }
      ],
      "return_type": "Unknown",
      "examples": []
    },
    "is_eq": {
      "object_type": "class",
      "description": "Comparator for SQL equality operator (`=`). Checks if a column value equals a specified value.",
      "init": {
        "params": [
          {
            "name": "value",
            "type": "Any",
            "description": "The value to compare against.",
            "default": "None",
            "required": true
          }
        ]
      },
      "properties": {},
      "parent_classes": [
        "Comparator"
      ],
      "examples": []
    },
    "is_neq": {
      "object_type": "class",
      "description": "Comparator for SQL inequality operator (`<>`). Checks if a column value is not equal to a specified value.",
      "init": {
        "params": [
          {
            "name": "value",
            "type": "Any",
            "description": "The value to compare against.",
            "default": "None",
            "required": true
          }
        ]
      },
      "properties": {},
      "parent_classes": [
        "Comparator"
      ],
      "examples": []
    },
    "is_gt": {
      "object_type": "class",
      "description": "Comparator for SQL greater than operator (`>`). Checks if a column value is greater than a specified value.",
      "init": {
        "params": [
          {
            "name": "value",
            "type": "Any",
            "description": "The value to compare against.",
            "default": "None",
            "required": true
          }
        ]
      },
      "properties": {},
      "parent_classes": [
        "Comparator"
      ],
      "examples": []
    },
    "is_between": {
      "object_type": "class",
      "description": "Comparator for SQL BETWEEN operator. Checks if a column value is between two specified values (inclusive).",
      "init": {
        "params": [
          {
            "name": "value1",
            "type": "Any",
            "description": "The lower bound value.",
            "default": "None",
            "required": true
          },
          {
            "name": "value2",
            "type": "Any",
            "description": "The upper bound value.",
            "default": "None",
            "required": true
          }
        ]
      },
      "properties": {},
      "parent_classes": [
        "Comparator"
      ],
      "examples": []
    },
    "is_gte": {
      "object_type": "class",
      "description": "Comparator for SQL greater than or equal operator (`>=`). Checks if a column value is greater than or equal to a specified value.",
      "init": {
        "params": [
          {
            "name": "value",
            "type": "Any",
            "description": "The value to compare against.",
            "default": "None",
            "required": true
          }
        ]
      },
      "properties": {},
      "parent_classes": [
        "Comparator"
      ],
      "examples": []
    },
    "is_in": {
      "object_type": "class",
      "description": "Comparator for SQL IN operator. Checks if a column value is in a specified list of values.",
      "init": {
        "params": [
          {
            "name": "value",
            "type": "List[Any]",
            "description": "The list of values to check against.",
            "default": "None",
            "required": true
          }
        ]
      },
      "properties": {},
      "parent_classes": [
        "Comparator"
      ],
      "examples": []
    },
    "is_lt": {
      "object_type": "class",
      "description": "Comparator for SQL less than operator (`<`). Checks if a column value is less than a specified value.",
      "init": {
        "params": [
          {
            "name": "value",
            "type": "Any",
            "description": "The value to compare against.",
            "default": "None",
            "required": true
          }
        ]
      },
      "properties": {},
      "parent_classes": [
        "Comparator"
      ],
      "examples": []
    },
    "is_like": {
      "object_type": "class",
      "description": "Comparator for SQL LIKE operator. Checks if a column value matches a pattern (case-sensitive).",
      "init": {
        "params": [
          {
            "name": "value",
            "type": "str",
            "description": "The pattern to match against.",
            "default": "None",
            "required": true
          }
        ]
      },
      "properties": {},
      "parent_classes": [
        "Comparator"
      ],
      "examples": []
    },
    "is_lte": {
      "object_type": "class",
      "description": "Comparator for SQL less than or equal operator (`<=`). Checks if a column value is less than or equal to a specified value.",
      "init": {
        "params": [
          {
            "name": "value",
            "type": "Any",
            "description": "The value to compare against.",
            "default": "None",
            "required": true
          }
        ]
      },
      "properties": {},
      "parent_classes": [
        "Comparator"
      ],
      "examples": []
    },
    "is_not_in": {
      "object_type": "class",
      "description": "Comparator for SQL NOT IN operator. Checks if a column value is not in a specified list of values.",
      "init": {
        "params": [
          {
            "name": "value",
            "type": "List[Any]",
            "description": "The list of values to check against.",
            "default": "None",
            "required": true
          }
        ]
      },
      "properties": {},
      "parent_classes": [
        "Comparator"
      ],
      "examples": []
    },
    "is_not_like": {
      "object_type": "class",
      "description": "Comparator for SQL NOT LIKE operator. Checks if a column value does not match a pattern (case-sensitive).",
      "init": {
        "params": [
          {
            "name": "value",
            "type": "str",
            "description": "The pattern to match against.",
            "default": "None",
            "required": true
          }
        ]
      },
      "properties": {},
      "parent_classes": [
        "Comparator"
      ],
      "examples": []
    },
    "is_null": {
      "object_type": "class",
      "description": "Comparator for SQL 'IS NULL' operator. Checks if a column value is NULL.",
      "init": {
        "params": []
      },
      "properties": {},
      "parent_classes": [
        "Comparator"
      ],
      "examples": []
    },
    "is_not_null": {
      "object_type": "class",
      "description": "Comparator for SQL IS NOT NULL operator. Checks if a column value is not NULL.",
      "init": {
        "params": []
      },
      "properties": {},
      "parent_classes": [
        "Comparator"
      ],
      "examples": []
    },
    "is_ilike": {
      "object_type": "class",
      "description": "Comparator for SQL ILIKE operator. Checks if a column value matches a pattern (case-insensitive).",
      "init": {
        "params": [
          {
            "name": "value",
            "type": "str",
            "description": "The pattern to match against.",
            "default": "None",
            "required": true
          }
        ]
      },
      "properties": {},
      "parent_classes": [
        "Comparator"
      ],
      "examples": []
    },
    "is_not_ilike": {
      "object_type": "class",
      "description": "Comparator for SQL NOT ILIKE operator. Checks if a column value does not match a pattern (case-insensitive).",
      "init": {
        "params": [
          {
            "name": "value",
            "type": "str",
            "description": "The pattern to match against.",
            "default": "None",
            "required": true
          }
        ]
      },
      "properties": {},
      "parent_classes": [
        "Comparator"
      ],
      "examples": []
    }
  },
  "abstra.tasks": {
    "get_tasks": {
      "object_type": "function",
      "description": "Retrieve a list of pending tasks.",
      "params": [
        {
          "name": "limit",
          "type": "Optional[int]",
          "description": "Maximum number of tasks to retrieve. Defaults to None which is interpreted as 100. Will be capped at 10000.",
          "default": "None",
          "required": false
        },
        {
          "name": "offset",
          "type": "int",
          "description": "Number of tasks to skip. Defaults to 0.",
          "default": "0",
          "required": false
        },
        {
          "name": "where",
          "type": "Optional[dict]",
          "description": "Dictionary of filters to apply. Defaults to None. List[Task]: List of pending tasks matching the criteria.",
          "default": "None",
          "required": false
        }
      ],
      "return_type": "List[abstra_internals.controllers.sdk.sdk_tasks.Task]",
      "examples": []
    },
    "send_task": {
      "object_type": "function",
      "description": "Send a new task to the task queue.",
      "params": [
        {
          "name": "type",
          "type": "str",
          "description": "Type identifier for the task.",
          "default": "None",
          "required": true
        },
        {
          "name": "payload",
          "type": "TaskPayload",
          "description": "Dictionary containing the task data.",
          "default": "None",
          "required": true
        },
        {
          "name": "show_warning",
          "type": "bool",
          "description": "Whether to show warnings. Defaults to True. Exception: If the payload is not a dictionary.",
          "default": "True",
          "required": false
        }
      ],
      "return_type": "None",
      "examples": []
    },
    "Task": {
      "object_type": "class",
      "description": "A task is a unit of work that can be sent to the execution engine.",
      "init": {
        "params": [
          {
            "name": "task_controller",
            "type": "TasksSDKController",
            "description": "The controller for managing tasks.",
            "default": "None",
            "required": true
          },
          {
            "name": "dto",
            "type": "TaskDTO",
            "description": "The data transfer object representing the task.",
            "default": "None",
            "required": true
          },
          {
            "name": "mock",
            "type": "bool",
            "description": "Whether the task is a mock task.",
            "default": "False",
            "required": false
          }
        ]
      },
      "properties": {},
      "parent_classes": [],
      "examples": []
    },
    "get_trigger_task": {
      "object_type": "function",
      "description": "Retrieve the task that triggered the current execution. Returns: Task: The task object that triggered this execution.",
      "params": [],
      "return_type": "abstra_internals.controllers.sdk.sdk_tasks.Task",
      "examples": []
    },
    "iter_tasks": {
      "object_type": "function",
      "description": "Iterate through all pending tasks, handling pagination automatically. This function yields tasks preloads in batches of 10. It continues to fetch and yield tasks until there are no more tasks to retrieve.",
      "params": [
        {
          "name": "where",
          "type": "Optional[dict]",
          "description": "Dictionary of filters to apply. Defaults to None. Task: Each pending task matching the criteria.",
          "default": "None",
          "required": false
        }
      ],
      "return_type": "Iterator[abstra_internals.controllers.sdk.sdk_tasks.Task]",
      "examples": []
    },
    "get_sent_tasks": {
      "object_type": "function",
      "description": "Retrieve a list of tasks that have been sent.",
      "params": [
        {
          "name": "limit",
          "type": "Optional[int]",
          "description": "Maximum number of tasks to retrieve. Defaults to None which is interpreted as 100 if where is also None.",
          "default": "None",
          "required": false
        },
        {
          "name": "offset",
          "type": "int",
          "description": "Number of tasks to skip. Defaults to 0.",
          "default": "0",
          "required": false
        },
        {
          "name": "where",
          "type": "Optional[dict]",
          "description": "Dictionary of filters to apply. Defaults to None. List[Task]: List of sent tasks matching the criteria.",
          "default": "None",
          "required": false
        }
      ],
      "return_type": "List[abstra_internals.controllers.sdk.sdk_tasks.Task]",
      "examples": []
    }
  },
  "abstra.types": {
    "AbstraOption": null,
    "FileResponse": null,
    "PhoneResponse": null,
    "AppointmentSlot": null
  }
}