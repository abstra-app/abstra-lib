import{z as t}from"./index.cf4c23b9.js";import{f as r,h as d,j as l,g as c,n as p,o as y}from"./icons.fd5c09b0.js";import"./outputWidgets.74b0761d.js";(function(){try{var a=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},e=new Error().stack;e&&(a._sentryDebugIds=a._sentryDebugIds||{},a._sentryDebugIds[e]="80229bf7-f200-4ad4-814b-cb78c6f77d4d",a._sentryDebugIdIdentifier="sentry-dbid-80229bf7-f200-4ad4-814b-cb78c6f77d4d")}catch{}})();const o={stages:[{icon:r,typeName:"forms",description:"Wait for a user input",key:"F",title:"Forms",startingOnly:!1,transitions:[{typeName:"forms:finished",title:"On Success",additionalPayload:[]},{typeName:"forms:failed",title:"On Failure",additionalPayload:[]}]},{typeName:"hooks",title:"Hooks",startingOnly:!0,icon:d,description:"Wait for an external API call",key:"H",transitions:[{typeName:"hooks:finished",title:"On Success",additionalPayload:[]},{typeName:"hooks:failed",title:"On Failure",additionalPayload:[]}]},{typeName:"jobs",title:"Jobs",startingOnly:!0,icon:l,description:"Scheduled tasks",key:"J",transitions:[{typeName:"jobs:finished",title:"On Success",additionalPayload:[]},{typeName:"jobs:failed",title:"On Failure",additionalPayload:[]}]},{typeName:"scripts",title:"Scripts",startingOnly:!1,icon:c,description:"Run a script",key:"S",transitions:[{typeName:"scripts:finished",title:"On Success",additionalPayload:[]},{typeName:"scripts:failed",title:"On Failure",additionalPayload:[]}]},{typeName:"conditions",title:"Conditions",startingOnly:!1,icon:p,description:"Make a decision",key:"C",transitions:[{typeName:"conditions:patternMatched",title:"Pattern Matched",additionalPayload:[]},{typeName:"conditions:patternNotMatched",title:"Pattern Not Matched",additionalPayload:[]}]},{typeName:"iterators",title:"Iterators",startingOnly:!1,icon:y,description:"Split thread for each element in a list",key:"I",transitions:[{typeName:"iterators:each",title:"Each",additionalPayload:[{key:"item",type:"typing.Any",title:"Item"}]}]}]};function N(a){const e=o.stages.find(i=>i.typeName===a||i.typeName===`${a}s`);if(!e)throw new Error(`No metadata found for stage ${a}`);return e.icon}const f=o.stages.flatMap(a=>a.transitions.flatMap(e=>e.typeName)),m=t.object({type:t.enum(["forms","hooks","jobs","scripts","conditions","iterators"]),id:t.string(),title:t.string(),position:t.object({x:t.number(),y:t.number()}),props:t.object({path:t.string().nullable(),filename:t.string().nullable(),variableName:t.string().nullable()})}),u=t.object({id:t.string(),type:t.enum(f),sourceStageId:t.string(),targetStageId:t.string(),props:t.object({conditionValue:t.string().nullable()})}),n=t.object({stages:t.array(m),transitions:t.array(u)}),b={"Content-Type":"application/json"},k="abstra-run-id";class I{async load(){const e=await fetch("/_editor/api/workflows");if(e.ok){const i=await e.json();return n.parse(i)}else throw new Error("Failed to fetch initial data")}async update(e){const i=await fetch("/_editor/api/workflows",{method:"PUT",headers:b,body:JSON.stringify(e)});if(i.ok){const s=await i.json();return n.parse(s)}else throw new Error("Failed to update workflow")}}export{k as A,I as W,N as s,o as w};
//# sourceMappingURL=api.fe9b8521.js.map
