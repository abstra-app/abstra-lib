var B=Object.defineProperty;var z=(o,t,e)=>t in o?B(o,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):o[t]=e;var p=(o,t,e)=>(z(o,typeof t!="symbol"?t+"":t,e),e);import{h as E}from"./router.643f183e.js";import{r as P,c as G,em as V,ae as q,w as F}from"./jwt-decode.esm.7fb8faf4.js";import"./contracts.generated.6e0d1816.js";import{A as C}from"./record.5fbe6782.js";import"./linters.910a9028.js";import{u as K}from"./polling.41905ad0.js";import{c as Q}from"./string.d8337a2b.js";(function(){try{var o=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},t=new Error().stack;t&&(o._sentryDebugIds=o._sentryDebugIds||{},o._sentryDebugIds[t]="be7a8cc5-e142-4c9f-9e8c-889b267b10a8",o._sentryDebugIdIdentifier="sentry-dbid-be7a8cc5-e142-4c9f-9e8c-889b267b10a8")}catch{}})();class W{async list(){return await(await fetch("/_editor/api/forms")).json()}async create(t,e,r,s){return await(await fetch("/_editor/api/forms",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({title:t,file:e,position:r,id:s})})).json()}async get(t){try{return await(await fetch(`/_editor/api/forms/${t}`)).json()}catch{return null}}async update(t,e){return await(await fetch(`/_editor/api/forms/${t}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json()}async delete(t,e){const r=e?"?remove_file=true":"",s=`/_editor/api/forms/${t}`+r;await fetch(s,{method:"DELETE",headers:{"Content-Type":"application/json"}})}async duplicate(t){return await(await fetch(`/_editor/api/forms/${t}/duplicate`,{method:"POST"})).json()}}const w=new W;class y{constructor(t){p(this,"record");this.record=C.create(w,t)}static async list(){return(await w.list()).map(e=>new y(e))}static async create(t,e,r,s){const i=await w.create(t,e,r,s);return new y(i)}static async get(t){const e=await w.get(t);return e?new y(e):null}get id(){return this.record.get("id")}get type(){return"form"}get allowRestart(){return this.record.get("allow_restart")}set allowRestart(t){this.record.set("allow_restart",t)}get file(){return this.record.get("file")}set file(t){this.record.set("file",t)}get autoStart(){return this.record.get("auto_start")}set autoStart(t){this.record.set("auto_start",t)}get endMessage(){return this.record.get("end_message")}set endMessage(t){this.record.set("end_message",t)}get errorMessage(){return this.record.get("error_message")}set errorMessage(t){this.record.set("error_message",t)}get path(){return this.record.get("path")}set path(t){this.record.set("path",t)}get restartButtonText(){return this.record.get("restart_button_text")}set restartButtonText(t){this.record.set("restart_button_text",t)}get startButtonText(){return this.record.get("start_button_text")}set startButtonText(t){this.record.set("start_button_text",t)}get startMessage(){return this.record.get("start_message")}set startMessage(t){this.record.set("start_message",t)}get timeoutMessage(){return this.record.get("timeout_message")}set timeoutMessage(t){this.record.set("timeout_message",t)}get notificationTrigger(){return new Proxy(this.record.get("notification_trigger"),{set:(t,e,r)=>(this.record.set("notification_trigger",{...t,[e]:r}),!0)})}set notificationTrigger(t){this.record.set("notification_trigger",t)}get(t){return this.record.get(t)}set(t,e){this.record.set(t,e)}get title(){return this.record.get("title")}set title(t){this.record.set("title",t)}get codeContent(){return this.record.get("code_content")}set codeContent(t){this.record.set("code_content",t)}get welcomeTitle(){return this.record.get("welcome_title")}set welcomeTitle(t){this.record.set("welcome_title",t)}async save(t){const e=this.codeContent;await this.record.save(t),this.record.updateInitialState("code_content",e)}onUpdate(t){this.record.pubsub.subscribe("update",t)}hasChanges(t){return this.record.hasChanges(t)}hasChangesDeep(t){return this.record.hasChangesDeep(t)}getInitialState(t){return this.record.getInitialState(t)}updateInitialState(t,e){this.record.updateInitialState(t,e)}async delete(t){await w.delete(this.id,t)}async duplicate(){const t=await w.duplicate(this.id);return new y(t)}makeRunnerData(t){return{...t.makeRunnerData(),id:this.id,isLocal:!0,path:this.path,title:this.title,isInitial:this.isInitial,runtimeType:"form",autoStart:this.autoStart,endMessage:this.endMessage,errorMessage:this.errorMessage,allowRestart:this.allowRestart,welcomeTitle:this.welcomeTitle,startMessage:this.startMessage,timeoutMessage:this.timeoutMessage,startButtonText:this.startButtonText,restartButtonText:this.restartButtonText}}get position(){const[t,e]=this.record.get("workflow_position");return{x:t,y:e}}get isInitial(){return this.record.get("is_initial")}static from(t){return new y(t)}}class X{async list(){return await(await fetch("/_editor/api/hooks")).json()}async create(t,e,r,s){return await(await fetch("/_editor/api/hooks",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({title:t,file:e,position:r,id:s})})).json()}async get(t){try{return await(await fetch(`/_editor/api/hooks/${t}`)).json()}catch{return null}}async update(t,e){return await(await fetch(`/_editor/api/hooks/${t}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json()}async delete(t,e){const r=e?"?remove_file=true":"",s=`/_editor/api/hooks/${t}`+r;await fetch(s,{method:"DELETE",headers:{"Content-Type":"application/json"}})}async run(t,e){const r=new URLSearchParams(e.query),s=await fetch(`/_editor/api/hooks/${t}/run?${r.toString()}`,{method:e.method,headers:{"Content-Type":"application/json",...e.headers},body:e.method==="GET"?void 0:e.body}),{status:i,headers:d,body:u}=await s.json();return{status:i,headers:d,body:u}}}const f=new X;class S{constructor(t){p(this,"record");this.record=C.create(f,t)}static async list(){return(await f.list()).map(e=>new S(e))}static async create(t,e,r,s){const i=await f.create(t,e,r,s);return new S(i)}static async get(t){const e=await f.get(t);return e?new S(e):null}async delete(t){await f.delete(this.id,t)}async duplicate(){return this}async save(t){const e=this.codeContent;await this.record.save(t),this.record.updateInitialState("code_content",e)}onUpdate(t){this.record.pubsub.subscribe("update",t)}hasChanges(t){return this.record.hasChanges(t)}getInitialState(t){return this.record.getInitialState(t)}updateInitialState(t,e){this.record.updateInitialState(t,e)}get id(){return this.record.get("id")}get type(){return"hook"}get path(){return this.record.get("path")}set path(t){this.record.set("path",t)}get title(){return this.record.get("title")}set title(t){this.record.set("title",t)}get codeContent(){return this.record.get("code_content")}set codeContent(t){this.record.set("code_content",t)}get file(){return this.record.get("file")}set file(t){this.record.set("file",t)}async run(t){return f.run(this.id,t)}get position(){const[t,e]=this.record.get("workflow_position");return{x:t,y:e}}get isInitial(){return this.record.get("is_initial")}static from(t){return new S(t)}}class Y{async list(){return await(await fetch("/_editor/api/jobs")).json()}async create(t,e,r,s){return await(await fetch("/_editor/api/jobs",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({title:t,file:e,position:r,id:s})})).json()}async get(t){try{return await(await fetch(`/_editor/api/jobs/${t}`)).json()}catch{return null}}async update(t,e){return await(await fetch(`/_editor/api/jobs/${t}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json()}async delete(t,e){const r=e?"?remove_file=true":"",s=`/_editor/api/jobs/${t}`+r;await fetch(s,{method:"DELETE",headers:{"Content-Type":"application/json"}})}async run(t){return(await fetch(`/_editor/api/jobs/${t}/run`,{method:"POST",headers:{"Content-Type":"application/json"}})).ok}}const m=new Y;class b{constructor(t){p(this,"record");p(this,"isInitial",!0);this.record=C.create(m,t)}static async list(){return(await m.list()).map(e=>new b(e))}static async create(t,e,r,s){const i=await m.create(t,e,r,s);return new b(i)}static async get(t){const e=await m.get(t);return e?new b(e):null}async delete(t){await m.delete(this.id,t)}async duplicate(){return this}async save(t){const e=this.codeContent;await this.record.save(t),this.record.updateInitialState("code_content",e)}onUpdate(t){this.record.pubsub.subscribe("update",t)}hasChanges(t){return this.record.hasChanges(t)}getInitialState(t){return this.record.getInitialState(t)}updateInitialState(t,e){this.record.updateInitialState(t,e)}get schedule(){return this.record.get("schedule")}set schedule(t){this.record.set("schedule",t)}get type(){return"job"}get title(){return this.record.get("title")}set title(t){this.record.set("title",t)}get codeContent(){return this.record.get("code_content")}set codeContent(t){this.record.set("code_content",t)}get file(){return this.record.get("file")}set file(t){this.record.set("file",t)}get id(){return this.record.get("id")}async run(){return m.run(this.id)}get position(){const[t,e]=this.record.get("workflow_position");return{x:t,y:e}}static from(t){return new b(t)}hasChangesDeep(t){return this.record.hasChangesDeep(t)}}class Z{async list(){return await(await fetch("/_editor/api/scripts")).json()}async create(t,e,r,s){return await(await fetch("/_editor/api/scripts",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({title:t,file:e,position:r,id:s})})).json()}async get(t){try{return await(await fetch(`/_editor/api/scripts/${t}`)).json()}catch{return null}}async update(t,e){return await(await fetch(`/_editor/api/scripts/${t}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json()}async delete(t,e){const r=e?"?remove_file=true":"",s=`/_editor/api/scripts/${t}`+r;await fetch(s,{method:"DELETE",headers:{"Content-Type":"application/json"}})}async run(t,e){return(await fetch(`/_editor/api/scripts/${t}/run`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({task_id:e})})).ok}}const T=new Z;class I{constructor(t){p(this,"record");this.record=C.create(T,t)}static async list(){return(await T.list()).map(e=>new I(e))}static async create(t,e,r,s){const i=await T.create(t,e,r,s);return new I(i)}static async get(t){const e=await T.get(t);return e?new I(e):null}async delete(t){await T.delete(this.id,t)}async duplicate(){return this}async save(t){const e=this.codeContent;await this.record.save(t),this.record.updateInitialState("code_content",e)}onUpdate(t){this.record.pubsub.subscribe("update",t)}hasChanges(t){return this.record.hasChanges(t)}getInitialState(t){return this.record.getInitialState(t)}updateInitialState(t,e){this.record.updateInitialState(t,e)}get id(){return this.record.get("id")}get codeContent(){return this.record.get("code_content")}set codeContent(t){this.record.set("code_content",t)}get title(){return this.record.get("title")}set title(t){this.record.set("title",t)}get type(){return"tasklet"}get file(){return this.record.get("file")}set file(t){this.record.set("file",t)}get path(){return this.record.get("path")}set path(t){this.record.set("path",t)}async run(t){return T.run(this.id,t)}get position(){const[t,e]=this.record.get("workflow_position");return{x:t,y:e}}get isInitial(){return!1}static from(t){return new I(t)}}class dt{async createTask(t,e,r){return fetch("/_editor/api/tasks",{method:"POST",body:JSON.stringify({name:t,payload:r,stage_id:e}),headers:{"Content-Type":"application/json"}}).then(s=>s.json())}async getAllTasks(t,e){const r={offset:t.currentIndex*t.pageSize,limit:t.pageSize,filter:{stage:e.stage,status:e.status,startDate:e.dateRange?e.dateRange[0]:void 0,endDate:e.dateRange?e.dateRange[1]:void 0}};return fetch("/_editor/api/tasks/list",{method:"POST",body:JSON.stringify(r),headers:{"Content-Type":"application/json"}}).then(s=>s.json())}async getStageTasks(t){return fetch(`/_editor/api/tasks/${t}`).then(e=>e.json())}async getSentStageTasks(t){return fetch(`/_editor/api/tasks/${t}/sent`).then(e=>e.json())}async updateTaskStatus(t,e){return fetch(`/_editor/api/tasks/${t}/status`,{method:"PUT",body:JSON.stringify({status:e}),headers:{"Content-Type":"application/json"}}).then(r=>r.json())}async clearAllTasks(){return fetch("/_editor/api/tasks/clear",{method:"DELETE"}).then(t=>t.json())}}class lt{constructor(t){p(this,"projectId");this.projectId=t}async createTask(t,e,r){return await E.post(`projects/${this.projectId}/tasks`,{name:t,stageId:e,payload:r})}async getAllTasks(t,e){const r={offset:(t.currentIndex*t.pageSize).toString(),limit:t.pageSize.toString(),stageId:e.stage,status:e.status,startDate:e.dateRange?e.dateRange[0]:void 0,endDate:e.dateRange?e.dateRange[1]:void 0};return Object.keys(r).forEach(i=>r[i]===void 0&&delete r[i]),await E.get(`projects/${this.projectId}/tasks`,r)}async getStageTasks(t){throw new Error("Method not implemented.")}async getSentStageTasks(t){throw new Error("Method not implemented.")}async updateTaskStatus(t,e){throw new Error("Method not implemented.")}async fetchStages(){throw new Error("Method not implemented.")}async fetchStatuses(){throw new Error("Method not implemented.")}async clearAllTasks(){throw new Error("Method not implemented.")}}function H({api:o,fetchTasks:t}){const e=P({state:"idle"}),r=()=>{e.value={state:"idle"}},s=()=>{e.value={state:"creating",name:"My task",payloadCode:`{
    "key": "value"
  }`}},i=async u=>{const c=e.value;if(c.state!=="creating")throw new Error("Payload is required to create a task");if(!d.value)return;const h=JSON.parse(c.payloadCode),k=await o.createTask(c.name,u,h);return await t(),r(),k},d=G(()=>{const u=e.value;if(u.state!=="creating")return!1;try{const c=JSON.parse(u.payloadCode);return V.exports.isObject(c)}catch{return!1}});return{createTask:i,creatingTaskState:e,cancelCreatingTask:r,startCreatingTask:s,isPayloadValid:d}}const v=["pink","orange","green","blue","purple","red","cyan","magenta","volcano","gold"],ut=({api:o,poll:t,stageId:e,stages:r})=>{const s=q({tasks:[],sentTasks:[],colorMap:new Map,pagination:{currentIndex:0,pageSize:10,totalCount:0},filters:{stage:void 0,status:void 0,dateRange:void 0},filterOptions:{stages:[],statuses:["pending","started","completed"].map(n=>({label:Q(n),value:n}))}}),i=[{name:"setToPending",label:"Set to pending",handler:()=>{s.tasks.filter(a=>a.checked).map(a=>a.id).forEach(a=>j(a))}},{name:"setToCompleted",label:"Set to completed",handler:()=>{s.tasks.filter(a=>a.checked).map(a=>a.id).forEach(a=>x(a))}},{name:"duplicate",label:"Duplicate",handler:()=>{s.tasks.filter(a=>a.checked).forEach(async a=>{await o.createTask(a.type,a.targetStageId,a.payload),c()})}}],d=P(["pending"]),u=n=>{const a=s.tasks.findIndex(g=>g.id===n.id);a!==-1?s.tasks[a]=n:s.tasks.unshift(n)},c=async()=>{const n=e?await o.getStageTasks(e):await o.getAllTasks(s.pagination,s.filters);s.tasks=n.tasks.map(a=>({key:a.id,id:a.id,type:a.type,status:a.status,targetStageId:a.targetStageId,targetStageTitle:a.targetStageTitle,targetStageType:a.targetStageType,sourceStageTitle:a.sourceStageTitle,sourceStageType:a.sourceStageType,created:{at:new Date(a.created.at).toString(),byExecutionId:a.created.byExecutionId,byStageId:a.created.byStageId},locked:a.locked?{at:new Date(a.locked.at).toString(),byExecutionId:a.locked.byExecutionId,byStageId:a.locked.byStageId}:null,completed:a.completed?{at:new Date(a.completed.at).toString(),byExecutionId:a.completed.byExecutionId,byStageId:a.completed.byStageId}:null,payload:a.payload,checked:!1})),s.pagination.totalCount=n.totalCount},h=async()=>{if(!e)return[];const n=await o.getSentStageTasks(e);s.sentTasks=n.tasks.map(a=>({key:a.id,id:a.id,type:a.type,status:a.status,targetStageId:a.targetStageId,targetStageTitle:a.targetStageTitle,targetStageType:a.targetStageType,sourceStageTitle:a.sourceStageTitle,sourceStageType:a.sourceStageType,created:{at:new Date(a.created.at).toString(),byExecutionId:a.created.byExecutionId,byStageId:a.created.byStageId},locked:a.locked?{at:new Date(a.locked.at).toString(),byExecutionId:a.locked.byExecutionId,byStageId:a.locked.byStageId}:null,completed:a.completed?{at:new Date(a.completed.at).toString(),byExecutionId:a.completed.byExecutionId,byStageId:a.completed.byStageId}:null,payload:a.payload}))},k=()=>{var g;let n=0;s.tasks.concat((g=s.sentTasks)!=null?g:[]).forEach(_=>{s.colorMap.has(_.type)||(s.colorMap.set(_.type,v[n]),n=(n+1)%v.length)})};F(s.filters,async()=>{await Promise.all([c(),h()]),k()});const O=async()=>{await Promise.all([c(),h()]),k()},{startPolling:D,endPolling:A}=K({task:O,interval:15e3}),$=async()=>{if(await Promise.all([c(),h()]),k(),r===null){const n=Promise.all([y.list(),S.list(),b.list(),I.list()]).then(([a,g,_,l])=>[...a,...g,..._,...l]);s.filterOptions.stages=(await n).map(a=>({label:a.title,value:a.id}))}else s.filterOptions.stages=r.map(n=>({label:n.stageTitle,value:n.id}));t&&D()},R=()=>{t&&A()},j=async n=>{await o.updateTaskStatus(n,"pending"),c()},x=async n=>{await o.updateTaskStatus(n,"completed"),c()},M=n=>{s.tasks=s.tasks.map(a=>(a.id===n&&(a.checked=!a.checked),a))},N=()=>{const n=[],a=s.tasks.filter(l=>l.checked);return a.length===0?[]:(n.push("duplicate"),a.every(l=>l.status==="pending")&&n.push("setToCompleted"),a.every(l=>l.status==="completed")&&n.push("setToPending"),i.filter(l=>n.includes(l.name)))},J=async()=>{await o.clearAllTasks(),c(),h()},U=()=>[{title:"Type",dataIndex:"type",key:"type",align:"center"},{title:"Payload",dataIndex:"payload",key:"payload",align:"center",width:"20%"},{title:"Status",dataIndex:"status",key:"status",align:"center",filterMode:"menu"},{title:"Stage",dataIndex:"targetStageTitle",key:"targetStageTitle",align:"center"},{title:"Created at",dataIndex:"createdAt",key:"createdAt",align:"center"},{title:"Completed at",dataIndex:"completedAt",key:"completedAt",align:"center"},{key:"actions",dataIndex:"actions",align:"center"}],L=H({api:o,fetchTasks:c});return{setup:$,tearDown:R,state:s,getColumns:U,collapseValue:d,setToPending:j,setToCompleted:x,fetchTasks:c,fetchSentTasks:h,checkTask:M,getPossibleActions:N,clearAllTasks:J,insertOrUpdate:u,...L}};export{y as F,S as H,b as J,dt as L,lt as R,I as S,ut as T};
//# sourceMappingURL=tasksController.4a937a41.js.map
