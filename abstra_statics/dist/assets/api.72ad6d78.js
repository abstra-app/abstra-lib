import{z as t}from"./index.cf4c23b9.js";import{w as r}from"./metadata.fcc83c00.js";import"./outputWidgets.3d482011.js";(function(){try{var a=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},e=new Error().stack;e&&(a._sentryDebugIds=a._sentryDebugIds||{},a._sentryDebugIds[e]="903f320d-80d6-4494-a607-69df4132a950",a._sentryDebugIdIdentifier="sentry-dbid-903f320d-80d6-4494-a607-69df4132a950")}catch{}})();const i=r.stages.flatMap(a=>a.transitions.flatMap(e=>e.typeName)),d=t.object({type:t.enum(["forms","hooks","jobs","scripts","conditions","iterators"]),id:t.string(),title:t.string(),position:t.object({x:t.number(),y:t.number()}),props:t.object({path:t.string().nullable(),filename:t.string().nullable(),variableName:t.string().nullable()})}),l=t.object({id:t.string(),type:t.enum(i),sourceStageId:t.string(),targetStageId:t.string(),props:t.object({conditionValue:t.string().nullable()})}),n=t.object({stages:t.array(d),transitions:t.array(l)}),c={"Content-Type":"application/json"},w="abstra-run-id";class b{async load(){const e=await fetch("/_editor/api/workflows");if(e.ok){const o=await e.json();return n.parse(o)}else throw new Error("Failed to fetch initial data")}async update(e){const o=await fetch("/_editor/api/workflows",{method:"PUT",headers:c,body:JSON.stringify(e)});if(o.ok){const s=await o.json();return n.parse(s)}else throw new Error("Failed to update workflow")}}export{w as A,b as W};
//# sourceMappingURL=api.72ad6d78.js.map
