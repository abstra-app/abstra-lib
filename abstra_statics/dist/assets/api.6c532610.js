import{z as t}from"./outputWidgets.b4050bc1.js";import{w as i}from"./metadata.ac3ecc26.js";(function(){try{var a=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},e=new Error().stack;e&&(a._sentryDebugIds=a._sentryDebugIds||{},a._sentryDebugIds[e]="0267a556-f0e1-4873-b09d-7d57cec8d1f7",a._sentryDebugIdIdentifier="sentry-dbid-0267a556-f0e1-4873-b09d-7d57cec8d1f7")}catch{}})();const l=i.stages.flatMap(a=>a.transitions.flatMap(e=>e.typeName)),d=t.object({type:t.enum(["forms","hooks","jobs","scripts","conditions","iterators"]),id:t.string(),title:t.string(),position:t.object({x:t.number(),y:t.number()}),props:t.object({path:t.string().nullable(),filename:t.string().nullable(),variableName:t.string().nullable(),itemName:t.string().nullable()})}),c=t.object({id:t.string(),type:t.enum(l),sourceStageId:t.string(),targetStageId:t.string(),props:t.object({conditionValue:t.string().nullable()})}),n=t.object({stages:t.array(d),transitions:t.array(c)}),r={"Content-Type":"application/json"},p="abstra-run-id";class u{async load(){const e=await fetch("/_editor/api/workflows");if(e.ok){const o=await e.json();return n.parse(o)}else throw new Error("Failed to fetch initial data")}async update(e){const o=await fetch("/_editor/api/workflows",{method:"PUT",headers:r,body:JSON.stringify(e)});if(o.ok){const s=await o.json();return n.parse(s)}else throw new Error("Failed to update workflow")}}class b{async load(){const e=await fetch("/_workflows");if(e.ok){const o=await e.json();return n.parse(o)}else throw new Error("Failed to fetch initial data")}async update(e){const o=await fetch("/_workflows",{method:"PUT",headers:r,body:JSON.stringify(e)});if(o.ok){const s=await o.json();return n.parse(s)}else throw new Error("Failed to update workflow")}}export{p as A,u as E,b as P};
//# sourceMappingURL=api.6c532610.js.map
