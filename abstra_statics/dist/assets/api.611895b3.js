import{z as t}from"./outputWidgets.24bbc644.js";import{w as r}from"./metadata.0097c5a8.js";(function(){try{var n=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},e=new Error().stack;e&&(n._sentryDebugIds=n._sentryDebugIds||{},n._sentryDebugIds[e]="786d49c1-9278-466f-87db-1fecc30487d9",n._sentryDebugIdIdentifier="sentry-dbid-786d49c1-9278-466f-87db-1fecc30487d9")}catch{}})();const i=r.stages.flatMap(n=>n.transitions.flatMap(e=>e.typeName)),c=t.object({type:t.enum(["forms","hooks","jobs","scripts","conditions","iterators"]),id:t.string(),title:t.string(),position:t.object({x:t.number(),y:t.number()}),props:t.object({path:t.string().nullable(),filename:t.string().nullable(),variableName:t.string().nullable(),itemName:t.string().nullable()})}),d=t.object({id:t.string(),type:t.enum(i),sourceStageId:t.string(),targetStageId:t.string(),props:t.object({conditionValue:t.string().nullable()})}),a=t.object({stages:t.array(c),transitions:t.array(d)}),l={"Content-Type":"application/json"},b="abstra-run-id";class u{async load(){const e=await fetch("/_editor/api/workflows");if(e.ok){const o=await e.json();return a.parse(o)}else throw new Error("Failed to fetch initial data")}async update(e){const o=await fetch("/_editor/api/workflows",{method:"PUT",headers:l,body:JSON.stringify(e)});if(o.ok){const s=await o.json();return a.parse(s)}else throw new Error("Failed to update workflow")}}export{b as A,u as W};
//# sourceMappingURL=api.611895b3.js.map
