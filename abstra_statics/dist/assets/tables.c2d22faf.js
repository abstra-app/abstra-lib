var j=Object.defineProperty;var y=(s,e,t)=>e in s?j(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var i=(s,e,t)=>(y(s,typeof e!="symbol"?e+"":e,t),t);import{C as c}from"./gateway.372f9f01.js";import{A as b}from"./activeRecord.b2024d00.js";import"./registerWidgets.b639afe0.js";(function(){try{var s=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},e=new Error().stack;e&&(s._sentryDebugIds=s._sentryDebugIds||{},s._sentryDebugIds[e]="37de7e6e-01cb-4aee-9ce6-6614204e161e",s._sentryDebugIdIdentifier="sentry-dbid-37de7e6e-01cb-4aee-9ce6-6614204e161e")}catch{}})();class w{async create(e){return c.post(`projects/${e.projectId}/tables/${e.tableId}/columns`,e)}async delete(e){return c.delete(`projects/${e.projectId}/tables/${e.tableId}/columns/${e.id}`)}async update(e,t){return c.patch(`projects/${e.projectId}/tables/${e.tableId}/columns/${e.id}`,t)}}const p=new w,l=class{constructor(e){i(this,"record");this.record=b.create(p,e,"id")}static async create(e,t,r,d,a,I){const h=await p.create({name:e,type:t,nullable:r,unique:d,tableId:a,projectId:I});return"error"in h?h:new l(h)}async update(e){if(Object.keys(e).length===0||!this.id)return{success:!0,error:""};const t=await p.update({id:this.id,tableId:this.tableId,projectId:this.projectId},e);return t.error?{success:!1,error:t.error}:{success:!0,error:""}}toDTO(){return this.record.state}get id(){return this.record.get("id")}get tableId(){return this.record.get("tableId")}get projectId(){return this.record.get("projectId")}get protected(){return this.record.get("protected")}async delete(){this.id&&p.delete({id:this.id,tableId:this.tableId,projectId:this.projectId})}};let n=l;i(n,"fromDTO",e=>new l(e));class m{async list(e){return c.get(`projects/${e}/tables`)}async create(e,t){return await c.post(`projects/${e.projectId}/tables`,t)}async get(e){return c.get(`projects/${e.projectId}/tables/${e.tableId}`)}async delete(e){return c.delete(`projects/${e.projectId}/tables/${e.tableId}`)}async selectRow(e){return c.get(`projects/${e.projectId}/tables/${e.tableId}/rows`)}async update(e,t){return c.patch(`projects/${e.projectId}/tables/${e.tableId}`,t)}async insertRow(e,t){return c.post(`projects/${e.projectId}/tables/${e.tableId}/rows`,t)}async updateRow(e,t){return c.patch(`projects/${e.projectId}/tables/${e.tableId}/rows/${e.rowId}`,t)}async deleteRow(e){return c.delete(`projects/${e.projectId}/tables/${e.tableId}/rows/${e.rowId}`)}}const o=new m;class u{constructor(e,t=null){i(this,"record");i(this,"columns");this.record=b.create(o,e,"id"),this.columns=t}static async list(e){return(await o.list(e)).map(r=>new u(r))}static async create(e,t){const r=await o.create({projectId:e},{name:t});return new u(r.table,r.columns.map(a=>n.fromDTO(a)))}static async get(e,t){const r=await o.get({projectId:e,tableId:t}),d=r.table,a=r.columns.map(I=>n.fromDTO({...I,projectId:d.projectId}));return new u(d,a)}async delete(e,t){return o.delete({projectId:e,tableId:t})}async save(){const e=this.record.changes;if(Object.keys(e).length!==0)try{await o.update({id:this.id,tableId:this.id,projectId:this.projectId},e)}finally{this.record.resetChanges()}}onUpdate(e){this.record.pubsub.subscribe("update",e)}hasChanges(){return this.record.hasChanges()}getColumns(){var e,t;return(t=(e=this.columns)==null?void 0:e.map(r=>r.toDTO()))!=null?t:[]}getUnprotectedColumns(){var e,t;return(t=(e=this.columns)==null?void 0:e.filter(r=>!r.protected).map(r=>r.toDTO()))!=null?t:[]}get id(){return this.record.get("id")}get name(){return this.record.get("name")}set name(e){this.record.set("name",e)}get projectId(){return this.record.get("projectId")}async addColumn(e){const t=await n.create(e.name,e.type,e.nullable,e.unique,this.id,this.projectId);return"error"in t?{success:!1,error:t.error}:this.columns?(this.columns.push(t),{success:!0,error:""}):(this.columns=[t],{success:!0,error:""})}getColumn(e){var t;return(t=this.columns)==null?void 0:t.find(r=>r.id&&r.id===e)}async select(e={}){const t=Object.keys(e).map(r=>`${r} = :${r}`).join(" AND ");return o.selectRow({name:this.name,where:t,params:e,tableId:this.id,projectId:this.projectId})}async insertRow(e){return o.insertRow({tableId:this.id,projectId:this.projectId},e)}async updateRow(e,t){return o.updateRow({tableId:this.id,projectId:this.projectId,rowId:e},t)}async deleteRow(e){return o.deleteRow({tableId:this.id,projectId:this.projectId,rowId:e})}}export{u as T};
//# sourceMappingURL=tables.c2d22faf.js.map
