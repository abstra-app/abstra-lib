var f=Object.defineProperty;var b=(a,t,e)=>t in a?f(a,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):a[t]=e;var p=(a,t,e)=>(b(a,typeof t!="symbol"?t+"":t,e),e);import"./index.0f630b70.js";import{A as w}from"./record.f729e500.js";(function(){try{var a=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},t=new Error().stack;t&&(a._sentryDebugIds=a._sentryDebugIds||{},a._sentryDebugIds[t]="b5c0641b-5d4e-486e-8530-8e34d3a6eaac",a._sentryDebugIdIdentifier="sentry-dbid-b5c0641b-5d4e-486e-8530-8e34d3a6eaac")}catch{}})();class I{static async*sendMessage(t,e,s,r){var h;const n=await fetch("/_editor/api/ai/message",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({messages:t,runtime:e,threadId:s})});if(!n.ok)throw new Error("Failed to send message");const d=(h=n.body)==null?void 0:h.getReader();if(!d)throw new Error("No response body");for(;!r();){const g=await d.read();if(g.done)break;yield new TextDecoder().decode(g.value)}}static async createThread(){return(await fetch("/_editor/api/ai/thread",{method:"POST"})).json()}static async cancelAllRuns(t){return(await fetch("/_editor/api/ai/cancel-all",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({threadId:t})})).ok}static async generateProject(t){const e=await fetch("/_editor/api/ai/generate",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({prompt:t})});if(!e.ok){const s=await e.text();throw new Error(s)}}static async vote(t,e,s,r){await fetch("/_editor/api/ai/vote",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({vote:t,question:e,answer:s,context:r})})}}class m{async list(){return await(await fetch("/_editor/api/hooks")).json()}async create(t,e,s){return await(await fetch("/_editor/api/hooks",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({title:t,file:e,position:s})})).json()}async get(t){return await(await fetch(`/_editor/api/hooks/${t}`)).json()}async update(t,e){return await(await fetch(`/_editor/api/hooks/${t}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json()}async delete(t,e){const s=e?"?remove_file=true":"",r=`/_editor/api/hooks/${t}`+s;await fetch(r,{method:"DELETE",headers:{"Content-Type":"application/json"}})}async run(t,e){const s=new URLSearchParams(e.query),r=await fetch(`/_editor/api/hooks/${t}/run?${s.toString()}`,{method:e.method,headers:{"Content-Type":"application/json",...e.headers},body:e.method==="GET"?void 0:e.body}),{status:n,headers:d,body:h}=await r.json();return{status:n,headers:d,body:h}}async test(t,e){const s=new URLSearchParams(e.query),r=await fetch(`/_editor/api/hooks/${t}/test?${s.toString()}`,{method:e.method,headers:{"Content-Type":"application/json",...e.headers},body:e.method==="GET"?void 0:e.body}),{status:n,headers:d,body:h}=await r.json();return{status:n,headers:d,body:h}}}const i=new m;class u{constructor(t){p(this,"record");this.record=w.create(i,t)}static async list(){return(await i.list()).map(e=>new u(e))}static async create(t,e,s){const r=await i.create(t,e,s);return new u(r)}static async get(t){const e=await i.get(t);return new u(e)}async delete(t){await i.delete(this.id,t)}async duplicate(){return this}async save(t){const e=this.codeContent;await this.record.save(t),this.record.updateInitialState("code_content",e)}onUpdate(t){this.record.pubsub.subscribe("update",t)}hasChanges(t){return this.record.hasChanges(t)}getInitialState(t){return this.record.getInitialState(t)}updateInitialState(t,e){this.record.updateInitialState(t,e)}get id(){return this.record.get("id")}get type(){return"hook"}get path(){return this.record.get("path")}set path(t){this.record.set("path",t)}get title(){return this.record.get("title")}set title(t){this.record.set("title",t)}get codeContent(){return this.record.get("code_content")}set codeContent(t){this.record.set("code_content",t)}get file(){return this.record.get("file")}set file(t){this.record.set("file",t)}async run(t){return i.run(this.id,t)}async test(t){return i.test(this.id,t)}get position(){const[t,e]=this.record.get("workflow_position");return{x:t,y:e}}get isInitial(){return this.record.get("is_initial")}static from(t){return new u(t)}}class j{async list(){return await(await fetch("/_editor/api/jobs")).json()}async create(t,e,s){return await(await fetch("/_editor/api/jobs",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({title:t,file:e,position:s})})).json()}async get(t){return await(await fetch(`/_editor/api/jobs/${t}`)).json()}async update(t,e){return await(await fetch(`/_editor/api/jobs/${t}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json()}async delete(t,e){const s=e?"?remove_file=true":"",r=`/_editor/api/jobs/${t}`+s;await fetch(r,{method:"DELETE",headers:{"Content-Type":"application/json"}})}async run(t){return(await fetch(`/_editor/api/jobs/${t}/run`,{method:"POST",headers:{"Content-Type":"application/json"}})).ok}async test(t){return(await fetch(`/_editor/api/jobs/${t}/test`,{method:"POST",headers:{"Content-Type":"application/json"}})).ok}}const o=new j;class y{constructor(t){p(this,"record");p(this,"isInitial",!0);this.record=w.create(o,t)}static async list(){return(await o.list()).map(e=>new y(e))}static async create(t,e,s){const r=await o.create(t,e,s);return new y(r)}static async get(t){const e=await o.get(t);return new y(e)}async delete(t){await o.delete(this.id,t)}async duplicate(){return this}async save(t){const e=this.codeContent;await this.record.save(t),this.record.updateInitialState("code_content",e)}onUpdate(t){this.record.pubsub.subscribe("update",t)}hasChanges(t){return this.record.hasChanges(t)}getInitialState(t){return this.record.getInitialState(t)}updateInitialState(t,e){this.record.updateInitialState(t,e)}get schedule(){return this.record.get("schedule")}set schedule(t){this.record.set("schedule",t)}get type(){return"job"}get title(){return this.record.get("title")}set title(t){this.record.set("title",t)}get codeContent(){return this.record.get("code_content")}set codeContent(t){this.record.set("code_content",t)}get file(){return this.record.get("file")}set file(t){this.record.set("file",t)}get id(){return this.record.get("id")}async test(){return o.test(this.id)}async run(){return o.run(this.id)}get position(){const[t,e]=this.record.get("workflow_position");return{x:t,y:e}}static from(t){return new y(t)}hasChangesDeep(t){return this.record.hasChangesDeep(t)}}class S{async list(){return await(await fetch("/_editor/api/scripts")).json()}async create(t,e,s){return await(await fetch("/_editor/api/scripts",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({title:t,file:e,position:s})})).json()}async get(t){return await(await fetch(`/_editor/api/scripts/${t}`)).json()}async update(t,e){return await(await fetch(`/_editor/api/scripts/${t}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json()}async delete(t,e){const s=e?"?remove_file=true":"",r=`/_editor/api/scripts/${t}`+s;await fetch(r,{method:"DELETE",headers:{"Content-Type":"application/json"}})}async run(t,e){return(await fetch(`/_editor/api/scripts/${t}/run`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({stage_run_id:e})})).ok}async test(t){return(await fetch(`/_editor/api/scripts/${t}/test`,{method:"POST",headers:{"Content-Type":"application/json"}})).ok}}const c=new S;class l{constructor(t){p(this,"record");this.record=w.create(c,t)}static async list(){return(await c.list()).map(e=>new l(e))}static async create(t,e,s){const r=await c.create(t,e,s);return new l(r)}static async get(t){const e=await c.get(t);return new l(e)}async delete(t){await c.delete(this.id,t)}async duplicate(){return this}async save(t){const e=this.codeContent;await this.record.save(t),this.record.updateInitialState("code_content",e)}onUpdate(t){this.record.pubsub.subscribe("update",t)}hasChanges(t){return this.record.hasChanges(t)}getInitialState(t){return this.record.getInitialState(t)}updateInitialState(t,e){this.record.updateInitialState(t,e)}get id(){return this.record.get("id")}get codeContent(){return this.record.get("code_content")}set codeContent(t){this.record.set("code_content",t)}get title(){return this.record.get("title")}set title(t){this.record.set("title",t)}get type(){return"script"}get file(){return this.record.get("file")}set file(t){this.record.set("file",t)}get path(){return this.record.get("path")}set path(t){this.record.set("path",t)}async test(){return c.test(this.id)}async run(t){return c.run(this.id,t)}get position(){const[t,e]=this.record.get("workflow_position");return{x:t,y:e}}get isInitial(){return!1}static from(t){return new l(t)}}export{I as A,u as H,y as J,l as S};
//# sourceMappingURL=scripts.d1bc2b2c.js.map
