var l=Object.defineProperty;var y=(a,t,e)=>t in a?l(a,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):a[t]=e;var o=(a,t,e)=>(y(a,typeof t!="symbol"?t+"":t,e),e);import{A as w}from"./activeRecord.f6cce158.js";import"./outputWidgets.8be138ba.js";(function(){try{var a=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},t=new Error().stack;t&&(a._sentryDebugIds=a._sentryDebugIds||{},a._sentryDebugIds[t]="16dfade6-43a0-413b-92ac-ee096b7d9e6e",a._sentryDebugIdIdentifier="sentry-dbid-16dfade6-43a0-413b-92ac-ee096b7d9e6e")}catch{}})();class f{async list(){return await(await fetch("/_editor/api/hooks")).json()}async create(){return await(await fetch("/_editor/api/hooks",{method:"POST",headers:{"Content-Type":"application/json"}})).json()}async get(t){return await(await fetch(`/_editor/api/hooks/${t}`)).json()}async update(t,e){return await(await fetch(`/_editor/api/hooks/${t}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json()}async delete(t){await fetch(`/_editor/api/hooks/${t}`,{method:"DELETE",headers:{"Content-Type":"application/json"}})}async test(t,e){const n=new URLSearchParams(e.query),i=await fetch(`/_editor/api/hooks/${t}/test?${n.toString()}`,{method:e.method,headers:{"Content-Type":"application/json",...e.headers},body:e.method==="GET"?void 0:e.body}),{status:d,headers:c,body:h,stderr:p,stdout:u}=await i.json();return{status:d,headers:c,body:h,stderr:p,stdout:u}}}const s=new f;class r{constructor(t){o(this,"record");this.record=w.create(s,t,"path")}static async list(){return(await s.list()).map(e=>new r(e))}static async create(){const t=await s.create();return new r(t)}static async get(t){const e=await s.get(t);return new r(e)}async delete(){await s.delete(this.path)}async duplicate(){return this}disable(){return s.update(this.path,{enabled:!1})}enable(){return s.update(this.path,{enabled:!0})}async save(){await this.record.save()}onUpdate(t){this.record.pubsub.subscribe("update",t)}hasChanges(t){return this.record.hasChanges(t)}get path(){return this.record.get("path")}set path(t){this.record.set("path",t)}get title(){return this.record.get("title")}set title(t){this.record.set("title",t)}get enabled(){return this.record.get("enabled")}get file(){return this.record.get("file")}set file(t){this.record.set("file",t)}async test(t){return s.test(this.path,t)}get routeName(){return"hooks"}get position(){const[t,e]=this.record.get("workflow_position");return{x:t,y:e,referential:"world"}}get isInitial(){return this.record.get("is_initial")}}export{r as H};
//# sourceMappingURL=hooks.f815923f.js.map
